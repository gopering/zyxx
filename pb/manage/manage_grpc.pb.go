// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: manage.proto

package manage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManageClient is the client API for Manage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManageClient interface {
	// 首页相关
	Summary(ctx context.Context, in *SummaryRequest, opts ...grpc.CallOption) (*SummaryResp, error)
	ExportSummary(ctx context.Context, in *ExportSummaryRequest, opts ...grpc.CallOption) (*ExportSummaryResp, error)
	// 管理员相关
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResp, error)
	ListManager(ctx context.Context, in *ListManagerRequest, opts ...grpc.CallOption) (*ListManagerResp, error)
	ModPasswd(ctx context.Context, in *ModPasswdRequest, opts ...grpc.CallOption) (*ModPasswdResp, error)
	ModUserInfo(ctx context.Context, in *ModUserInfoRequest, opts ...grpc.CallOption) (*ModUserInfoResp, error)
	DelUser(ctx context.Context, in *DelUserRequest, opts ...grpc.CallOption) (*DelUserResp, error)
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResp, error)
	ExportUser(ctx context.Context, in *ExportUserRequest, opts ...grpc.CallOption) (*ExportUserResp, error)
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResp, error)
	// 角色相关
	AddRoleInfo(ctx context.Context, in *AddRoleInfoRequest, opts ...grpc.CallOption) (*AddRoleInfoResp, error)
	ModRoleInfo(ctx context.Context, in *ModRoleInfoRequest, opts ...grpc.CallOption) (*ModRoleInfoResp, error)
	DelRoleInfo(ctx context.Context, in *DelRoleInfoRequest, opts ...grpc.CallOption) (*DelRoleInfoResp, error)
	ListRole(ctx context.Context, in *ListRoleRequest, opts ...grpc.CallOption) (*ListRoleResp, error)
	FronzenRole(ctx context.Context, in *FrozenRoleRequest, opts ...grpc.CallOption) (*FrozenRoleResp, error)
	RecoverRole(ctx context.Context, in *RecoverRoleRequest, opts ...grpc.CallOption) (*RecoverRoleResp, error)
	// 测肤维度文案
	AddMeasureSkinDimension(ctx context.Context, in *AddMeasureSkinDimensionRequest, opts ...grpc.CallOption) (*AddMeasureSkinDimensionResp, error)
	ListMeasureSkinDimension(ctx context.Context, in *ListMeasureSkinDimensionRequest, opts ...grpc.CallOption) (*ListMeasureSkinDimensionResp, error)
	ModMeasureSkinDimension(ctx context.Context, in *ModMeasureSkinDimensionRequest, opts ...grpc.CallOption) (*ModMeasureSkinDimensionResp, error)
	DelMeasureSkinDimension(ctx context.Context, in *DelMeasureSkinDimensionRequest, opts ...grpc.CallOption) (*DelMeasureSkinDimensionResp, error)
	// 检测维度设置
	AddMeasureDimensionSetting(ctx context.Context, in *AddMeasureDimensionSettingRequest, opts ...grpc.CallOption) (*AddMeasureDimensionSettingResp, error)
	ListMeasureDimensionSetting(ctx context.Context, in *ListMeasureDimensionSettingRequest, opts ...grpc.CallOption) (*ListMeasureDimensionSettingResp, error)
	ModMeasureDimensionSetting(ctx context.Context, in *ModMeasureDimensionSettingRequest, opts ...grpc.CallOption) (*ModMeasureDimensionSettingResp, error)
	DelMeasureDimensionSetting(ctx context.Context, in *DelMeasureDimensionSettingRequest, opts ...grpc.CallOption) (*DelMeasureDimensionSettingResp, error)
	// 测肤报告设置
	AddReportSetting(ctx context.Context, in *AddReportSettingReq, opts ...grpc.CallOption) (*AddReportSettingRsp, error)
	DelReportSetting(ctx context.Context, in *DelReportSettingReq, opts ...grpc.CallOption) (*DelReportSettingRsp, error)
	ModReportSetting(ctx context.Context, in *ModReportSettingReq, opts ...grpc.CallOption) (*ModReportSettingRsp, error)
	ListReportSetting(ctx context.Context, in *ListReportSettingReq, opts ...grpc.CallOption) (*ListReportSettingRsp, error)
	// 产品字典
	AddProductDict(ctx context.Context, in *AddProductDictRequest, opts ...grpc.CallOption) (*AddProductDictResp, error)
	ListProductDict(ctx context.Context, in *ListProductDictRequest, opts ...grpc.CallOption) (*ListProductDictResp, error)
	ModProductDict(ctx context.Context, in *ModProductDictRequest, opts ...grpc.CallOption) (*ModProductDictResp, error)
	DelProductDict(ctx context.Context, in *DelProductDictRequest, opts ...grpc.CallOption) (*DelProductDictResp, error)
	AddDict(ctx context.Context, in *AddDictReq, opts ...grpc.CallOption) (*AddDictRsp, error)
	DelDict(ctx context.Context, in *DelDictReq, opts ...grpc.CallOption) (*DelDictRsp, error)
	ModDict(ctx context.Context, in *ModDictReq, opts ...grpc.CallOption) (*ModDictRsp, error)
	ListDict(ctx context.Context, in *ListDictReq, opts ...grpc.CallOption) (*ListDictRsp, error)
	AddTheme(ctx context.Context, in *AddThemeReq, opts ...grpc.CallOption) (*AddThemeRsp, error)
	DelTheme(ctx context.Context, in *DelThemeReq, opts ...grpc.CallOption) (*DelThemeRsp, error)
	ModTheme(ctx context.Context, in *ModThemeReq, opts ...grpc.CallOption) (*ModThemeRsp, error)
	ListTheme(ctx context.Context, in *ListThemeReq, opts ...grpc.CallOption) (*ListThemeRsp, error)
	// 推送消息
	AddPushMessage(ctx context.Context, in *AddPushMessageRequest, opts ...grpc.CallOption) (*AddPushMessageResp, error)
	ListPushMessage(ctx context.Context, in *ListPushMessageRequest, opts ...grpc.CallOption) (*ListPushMessageResp, error)
	ModPushMessage(ctx context.Context, in *ModPushMessageRequest, opts ...grpc.CallOption) (*ModPushMessageResp, error)
	DelPushMessage(ctx context.Context, in *DelPushMessageRequest, opts ...grpc.CallOption) (*DelPushMessageResp, error)
	// 意见反馈
	ListIssue(ctx context.Context, in *ListIssueRequest, opts ...grpc.CallOption) (*ListIssueResp, error)
	ModIssue(ctx context.Context, in *ModIssueRequest, opts ...grpc.CallOption) (*ModIssueResp, error)
	DelIssue(ctx context.Context, in *DelIssueRequest, opts ...grpc.CallOption) (*DelIssueResp, error)
	// 美妆镜管理
	ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResp, error)
	AddMachines(ctx context.Context, in *AddMachinesRequest, opts ...grpc.CallOption) (*AddMachinesResp, error)
	DelMachines(ctx context.Context, in *DelMachinesRequest, opts ...grpc.CallOption) (*DelMachinesResp, error)
	ModMachines(ctx context.Context, in *ModMachinesRequest, opts ...grpc.CallOption) (*ModMachinesResp, error)
	// 待机轮播图管理
	ListMachinesIdleRes(ctx context.Context, in *ListMachinesIdleResRequest, opts ...grpc.CallOption) (*ListMachinesIdleResResp, error)
	AddMachinesIdleRes(ctx context.Context, in *AddMachinesIdleResRequest, opts ...grpc.CallOption) (*AddMachinesIdleResResp, error)
	DelMachinesIdleRes(ctx context.Context, in *DelMachinesIdleResRequest, opts ...grpc.CallOption) (*DelMachinesIdleResResp, error)
	ModMachinesIdleRes(ctx context.Context, in *ModMachinesIdleResRequest, opts ...grpc.CallOption) (*ModMachinesIdleResResp, error)
	// 护肤品管理
	ListSkinCareProduct(ctx context.Context, in *ListSkinCareProductRequest, opts ...grpc.CallOption) (*ListSkinCareProductResp, error)
	AddSkinCareProduct(ctx context.Context, in *AddSkinCareProductRequest, opts ...grpc.CallOption) (*AddSkinCareProductResp, error)
	DelSkinCareProduct(ctx context.Context, in *DelSkinCareProductRequest, opts ...grpc.CallOption) (*DelSkinCareProductResp, error)
	ModSkinCareProduct(ctx context.Context, in *ModSkinCareProductRequest, opts ...grpc.CallOption) (*ModSkinCareProductResp, error)
	UpSkinCareProduct(ctx context.Context, in *UpSkinCareProductRequest, opts ...grpc.CallOption) (*UpSkinCareProductResp, error)
	DownSkinCareProduct(ctx context.Context, in *DownSkinCareProductRequest, opts ...grpc.CallOption) (*DownSkinCareProductResp, error)
	// 推荐管理
	BatchSyncRecommendProduct(ctx context.Context, in *BatchSyncRecommendProductReq, opts ...grpc.CallOption) (*BatchSyncRecommendProductRsp, error)
	BatchSyncRecommendProject(ctx context.Context, in *BatchSyncRecommendProjectReq, opts ...grpc.CallOption) (*BatchSyncRecommendProjectRsp, error)
	AddSkinCareProject(ctx context.Context, in *AddSkinCareProjectReq, opts ...grpc.CallOption) (*AddSkinCareProjectRsp, error)
	DelSkinCareProject(ctx context.Context, in *DelSkinCareProjectReq, opts ...grpc.CallOption) (*DelSkinCareProjectRsp, error)
	ModSkinCareProject(ctx context.Context, in *ModSkinCareProjectReq, opts ...grpc.CallOption) (*ModSkinCareProjectRsp, error)
	ListSkinCareProject(ctx context.Context, in *ListSkinCareProjectReq, opts ...grpc.CallOption) (*ListSkinCareProjectRsp, error)
	OnOffSkinCareProject(ctx context.Context, in *OnOffSkinCareProjectReq, opts ...grpc.CallOption) (*OnOffSkinCareProjectRsp, error)
	// 彩妆管理
	ListCosmeticsProduct(ctx context.Context, in *ListCosmeticsProductRequest, opts ...grpc.CallOption) (*ListCosmeticsProductResp, error)
	AddCosmeticsProduct(ctx context.Context, in *AddCosmeticsProductRequest, opts ...grpc.CallOption) (*AddCosmeticsProductResp, error)
	DelCosmeticsProduct(ctx context.Context, in *DelCosmeticsProductRequest, opts ...grpc.CallOption) (*DelCosmeticsProductResp, error)
	ModCosmeticsProduct(ctx context.Context, in *ModCosmeticsProductRequest, opts ...grpc.CallOption) (*ModCosmeticsProductResp, error)
	UpCosmeticsProduct(ctx context.Context, in *UpCosmeticsProductRequest, opts ...grpc.CallOption) (*UpCosmeticsProductResp, error)
	DownCosmeticsProduct(ctx context.Context, in *DownCosmeticsProductRequest, opts ...grpc.CallOption) (*DownCosmeticsProductResp, error)
	// 化妆教程管理
	ListMichellPhan(ctx context.Context, in *ListMichellPhanRequest, opts ...grpc.CallOption) (*ListMichellPhanResp, error)
	AddMichellPhan(ctx context.Context, in *AddMichellPhanRequest, opts ...grpc.CallOption) (*AddMichellPhanResp, error)
	DelMichellPhan(ctx context.Context, in *DelMichellPhanRequest, opts ...grpc.CallOption) (*DelMichellPhanResp, error)
	ModMichellPhan(ctx context.Context, in *ModMichellPhanRequest, opts ...grpc.CallOption) (*ModMichellPhanResp, error)
	// 护肤建议管理
	ListSkinCareAdvice(ctx context.Context, in *ListSkinCareAdviceRequest, opts ...grpc.CallOption) (*ListSkinCareAdviceResp, error)
	AddSkinCareAdvice(ctx context.Context, in *AddSkinCareAdviceRequest, opts ...grpc.CallOption) (*AddSkinCareAdviceResp, error)
	DelSkinCareAdvice(ctx context.Context, in *DelSkinCareAdviceRequest, opts ...grpc.CallOption) (*DelSkinCareAdviceResp, error)
	ModSkinCareAdvice(ctx context.Context, in *ModSkinCareAdviceRequest, opts ...grpc.CallOption) (*ModSkinCareAdviceResp, error)
	UpSkinCareAdvice(ctx context.Context, in *UpSkinCareAdviceRequest, opts ...grpc.CallOption) (*UpSkinCareAdviceResp, error)
	DownSkinCareAdvice(ctx context.Context, in *DownSkinCareAdviceRequest, opts ...grpc.CallOption) (*DownSkinCareAdviceResp, error)
	// 测肤记录管理
	ListMeasureSkinRecord(ctx context.Context, in *ListMeasureSkinRecordRequest, opts ...grpc.CallOption) (*ListMeasureSkinRecordResp, error)
	GetMeasureSkinDetail(ctx context.Context, in *GetMeasureSkinDetailRequest, opts ...grpc.CallOption) (*GetMeasureSkinDetailResp, error)
	DelMeasureSkinRecord(ctx context.Context, in *DelMeasureSkinRecordRequest, opts ...grpc.CallOption) (*DelMeasureSkinRecordResp, error)
	// 产品推荐权重设置管理
	ListProductRecommendationWeightSetting(ctx context.Context, in *ListProductRecommendationWeightSettingRequest, opts ...grpc.CallOption) (*ListProductRecommendationWeightSettingResp, error)
	AddProductRecommendationWeightSetting(ctx context.Context, in *AddProductRecommendationWeightSettingRequest, opts ...grpc.CallOption) (*AddProductRecommendationWeightSettingResp, error)
	DelProductRecommendationWeightSetting(ctx context.Context, in *DelProductRecommendationWeightSettingRequest, opts ...grpc.CallOption) (*DelProductRecommendationWeightSettingResp, error)
	ModProductRecommendationWeightSetting(ctx context.Context, in *ModProductRecommendationWeightSettingRequest, opts ...grpc.CallOption) (*ModProductRecommendationWeightSettingResp, error)
	// 设备用户相关
	ListDeviceUser(ctx context.Context, in *ListDeviceUserRequest, opts ...grpc.CallOption) (*ListDeviceUserResp, error)
	FrozenDeviceUser(ctx context.Context, in *FrozenDeviceUserRequest, opts ...grpc.CallOption) (*FrozenDeviceUserResp, error)
	RecoverDeviceUser(ctx context.Context, in *RecoverDeviceUserRequest, opts ...grpc.CallOption) (*RecoverDeviceUserResp, error)
	// 教程分类相关
	AddCourseClassInfo(ctx context.Context, in *AddCourseClassInfoRequest, opts ...grpc.CallOption) (*AddCourseClassInfoResp, error)
	ModCourseClassInfo(ctx context.Context, in *ModCourseClassInfoRequest, opts ...grpc.CallOption) (*ModCourseClassInfoResp, error)
	DelCourseClassInfo(ctx context.Context, in *DelCourseClassInfoRequest, opts ...grpc.CallOption) (*DelCourseClassInfoResp, error)
	ListCourseClass(ctx context.Context, in *ListCourseClassRequest, opts ...grpc.CallOption) (*ListCourseClassResp, error)
	GetCourseClassNameList(ctx context.Context, in *GetCourseClassNameListRequest, opts ...grpc.CallOption) (*GetCourseClassNameListResp, error)
	UpCourseClass(ctx context.Context, in *UpCourseClassRequest, opts ...grpc.CallOption) (*UpCourseClassResp, error)
	DownCourseClass(ctx context.Context, in *DownCourseClassRequest, opts ...grpc.CallOption) (*DownCourseClassResp, error)
	GetYouZanOnSaleList(ctx context.Context, in *GetYouZanOnSaleListRequest, opts ...grpc.CallOption) (*GetYouZanOnSaleListResp, error)
	GetYouZanItemDetail(ctx context.Context, in *GetYouZanItemDetailRequest, opts ...grpc.CallOption) (*GetYouZanItemDetailResp, error)
	// 达人相关
	AddWiseManInfo(ctx context.Context, in *AddWiseManInfoRequest, opts ...grpc.CallOption) (*AddWiseManInfoResp, error)
	ModWiseManInfo(ctx context.Context, in *ModWiseManInfoRequest, opts ...grpc.CallOption) (*ModWiseManInfoResp, error)
	DelWiseManInfo(ctx context.Context, in *DelWiseManInfoRequest, opts ...grpc.CallOption) (*DelWiseManInfoResp, error)
	ListWiseMan(ctx context.Context, in *ListWiseManRequest, opts ...grpc.CallOption) (*ListWiseManResp, error)
	GetWiseManNameList(ctx context.Context, in *GetWiseManNameListRequest, opts ...grpc.CallOption) (*GetWiseManNameListResp, error)
	UpWiseMan(ctx context.Context, in *UpWiseManRequest, opts ...grpc.CallOption) (*UpWiseManResp, error)
	DownWiseMan(ctx context.Context, in *DownWiseManRequest, opts ...grpc.CallOption) (*DownWiseManResp, error)
	// 教程相关
	AddCourseInfo(ctx context.Context, in *AddCourseInfoRequest, opts ...grpc.CallOption) (*AddCourseInfoResp, error)
	ModCourseInfo(ctx context.Context, in *ModCourseInfoRequest, opts ...grpc.CallOption) (*ModCourseInfoResp, error)
	DelCourseInfo(ctx context.Context, in *DelCourseInfoRequest, opts ...grpc.CallOption) (*DelCourseInfoResp, error)
	ListCourse(ctx context.Context, in *ListCourseRequest, opts ...grpc.CallOption) (*ListCourseResp, error)
	ListCanRecommendCourseName(ctx context.Context, in *ListCanRecommendCourseNameRequest, opts ...grpc.CallOption) (*ListCanRecommendCourseNameResp, error)
	ListCourseStepAndProduct(ctx context.Context, in *ListCourseStepAndProductRequest, opts ...grpc.CallOption) (*ListCourseStepAndProductResp, error)
	UpCourse(ctx context.Context, in *UpCourseRequest, opts ...grpc.CallOption) (*UpCourseResp, error)
	DownCourse(ctx context.Context, in *DownCourseRequest, opts ...grpc.CallOption) (*DownCourseResp, error)
	// 推荐教程相关
	AddCourseRecommendInfo(ctx context.Context, in *AddCourseRecommendInfoRequest, opts ...grpc.CallOption) (*AddCourseRecommendInfoResp, error)
	ModCourseRecommendInfo(ctx context.Context, in *ModCourseRecommendInfoRequest, opts ...grpc.CallOption) (*ModCourseRecommendInfoResp, error)
	DelCourseRecommendInfo(ctx context.Context, in *DelCourseRecommendInfoRequest, opts ...grpc.CallOption) (*DelCourseRecommendInfoResp, error)
	ListCourseRecommend(ctx context.Context, in *ListCourseRecommendRequest, opts ...grpc.CallOption) (*ListCourseRecommendResp, error)
	UpCourseRecommend(ctx context.Context, in *UpCourseRecommendRequest, opts ...grpc.CallOption) (*UpCourseRecommendResp, error)
	DownCourseRecommend(ctx context.Context, in *DownCourseRecommendRequest, opts ...grpc.CallOption) (*DownCourseRecommendResp, error)
	// 医生相关
	AddDoctorInfo(ctx context.Context, in *AddDoctorInfoRequest, opts ...grpc.CallOption) (*AddDoctorInfoResp, error)
	ModDoctorInfo(ctx context.Context, in *ModDoctorInfoRequest, opts ...grpc.CallOption) (*ModDoctorInfoResp, error)
	DelDoctorInfo(ctx context.Context, in *DelDoctorInfoRequest, opts ...grpc.CallOption) (*DelDoctorInfoResp, error)
	ListDoctor(ctx context.Context, in *ListDoctorRequest, opts ...grpc.CallOption) (*ListDoctorResp, error)
	UpDoctor(ctx context.Context, in *UpDoctorRequest, opts ...grpc.CallOption) (*UpDoctorResp, error)
	DownDoctor(ctx context.Context, in *DownDoctorRequest, opts ...grpc.CallOption) (*DownDoctorResp, error)
	// 操作记录
	AddOperationLog(ctx context.Context, in *AddOperationLogRequest, opts ...grpc.CallOption) (*AddOperationLogResp, error)
	ListOperationLog(ctx context.Context, in *ListOperationLogRequest, opts ...grpc.CallOption) (*ListOperationLogResp, error)
	// 查询导入任务
	ListImportTask(ctx context.Context, in *ListImportTaskRequest, opts ...grpc.CallOption) (*ListImportTaskResp, error)
	AddImportTask(ctx context.Context, in *AddImportTaskRequest, opts ...grpc.CallOption) (*AddImportTaskResp, error)
	// 查询数据埋点列表
	ListDataPoint(ctx context.Context, in *ListDataPointRequest, opts ...grpc.CallOption) (*ListDataPointResp, error)
	// 版本管理相关
	AddDeviceVersionInfo(ctx context.Context, in *AddDeviceVersionRequest, opts ...grpc.CallOption) (*AddDeviceVersionResp, error)
	ModDeviceVersionInfo(ctx context.Context, in *ModDeviceVersionRequest, opts ...grpc.CallOption) (*ModDeviceVersionResp, error)
	DelDeviceVersionInfo(ctx context.Context, in *DelDeviceVersionRequest, opts ...grpc.CallOption) (*DelDeviceVersionResp, error)
	ListDeviceVersion(ctx context.Context, in *ListDeviceVersionRequest, opts ...grpc.CallOption) (*ListDeviceVersionResp, error)
	ListCheckPasswordList(ctx context.Context, in *GetCheckPasswordListRequest, opts ...grpc.CallOption) (*GetCheckPasswordListResp, error)
	SetCheckPasswordTimer(ctx context.Context, in *SetCheckPasswordTimerRequest, opts ...grpc.CallOption) (*SetCheckPasswordTimerResp, error)
	ListWhiteList(ctx context.Context, in *GetListWhiteListRequest, opts ...grpc.CallOption) (*GetListWhiteListResp, error)
	AddWhiteList(ctx context.Context, in *AddListWhiteListRequest, opts ...grpc.CallOption) (*AddListWhiteListResp, error)
	DelWhiteList(ctx context.Context, in *DelListWhiteListRequest, opts ...grpc.CallOption) (*DelListWhiteListResp, error)
	SyncWhiteList(ctx context.Context, in *SyncWhiteListRequest, opts ...grpc.CallOption) (*SyncWhiteListResp, error)
	ListAppConfig(ctx context.Context, in *ListAppConfigRequest, opts ...grpc.CallOption) (*ListAppConfigResp, error)
	AddAppConfig(ctx context.Context, in *AddAppConfigRequest, opts ...grpc.CallOption) (*AddAppConfigResp, error)
	DelAppConfig(ctx context.Context, in *DelAppConfigRequest, opts ...grpc.CallOption) (*DelAppConfigResp, error)
	ModAppConfig(ctx context.Context, in *ModAppConfigRequest, opts ...grpc.CallOption) (*ModAppConfigResp, error)
	SyncAppConfig(ctx context.Context, in *SyncAppConfigRequest, opts ...grpc.CallOption) (*SyncAppConfigResp, error)
	// 权限系统
	// 商家
	ListBusiness(ctx context.Context, in *ListBusinessRequest, opts ...grpc.CallOption) (*ListBusinessResp, error)
	CreateBusiness(ctx context.Context, in *CreateBusinessRequest, opts ...grpc.CallOption) (*CreateBusinessResp, error)
	AddBusiness(ctx context.Context, in *AddBusinessRequest, opts ...grpc.CallOption) (*AddBusinessResp, error)
	ModBusiness(ctx context.Context, in *ModBusinessRequest, opts ...grpc.CallOption) (*ModBusinessResp, error)
	DelBusiness(ctx context.Context, in *DelBusinessRequest, opts ...grpc.CallOption) (*DelBusinessResp, error)
	// 门店
	ListShopInfo(ctx context.Context, in *ListShopInfoRequest, opts ...grpc.CallOption) (*ListShopInfoResp, error)
	AddShopInfo(ctx context.Context, in *AddShopInfoRequest, opts ...grpc.CallOption) (*AddShopInfoResp, error)
	ModShopInfo(ctx context.Context, in *ModShopInfoRequest, opts ...grpc.CallOption) (*ModShopInfoResp, error)
	DelShopInfo(ctx context.Context, in *DelShopInfoRequest, opts ...grpc.CallOption) (*DelShopInfoResp, error)
	// 权限
	ListPermission(ctx context.Context, in *ListPermissionRequest, opts ...grpc.CallOption) (*ListPermissionResp, error)
	AddPermission(ctx context.Context, in *AddPermissionRequest, opts ...grpc.CallOption) (*AddPermissionResp, error)
	ModPermission(ctx context.Context, in *ModPermissionRequest, opts ...grpc.CallOption) (*ModPermissionResp, error)
	DelPermission(ctx context.Context, in *DelPermissionRequest, opts ...grpc.CallOption) (*DelPermissionResp, error)
	GetListPermissionByRoleId(ctx context.Context, in *ListPermissionByRoleIdRequest, opts ...grpc.CallOption) (*ListPermissionByRoleIdResp, error)
	GetListPermissionByManageId(ctx context.Context, in *ListPermissionByManageIdRequest, opts ...grpc.CallOption) (*ListPermissionByManageIdResp, error)
	// 用户角色关系表
	ListManagerRoleRelation(ctx context.Context, in *ListManagerRoleRelationRequest, opts ...grpc.CallOption) (*ListManagerRoleRelationResp, error)
	AddManagerRoleRelation(ctx context.Context, in *AddManagerRoleRelationRequest, opts ...grpc.CallOption) (*AddManagerRoleRelationResp, error)
	ModManagerRoleRelation(ctx context.Context, in *ModManagerRoleRelationRequest, opts ...grpc.CallOption) (*ModManagerRoleRelationResp, error)
	DelManagerRoleRelation(ctx context.Context, in *DelManagerRoleRelationRequest, opts ...grpc.CallOption) (*DelManagerRoleRelationResp, error)
	ListManagerRoleRelationByManageId(ctx context.Context, in *ListManagerRoleRelationByManageIdRequest, opts ...grpc.CallOption) (*ListManagerRoleRelationByManageIdResp, error)
	DelManagerRoleRelationByManageId(ctx context.Context, in *DelManagerRoleRelationByManageIdRequest, opts ...grpc.CallOption) (*DelManagerRoleRelationByManageIdResp, error)
	AddManagerRoleRelationByManageId(ctx context.Context, in *AddManagerRoleRelationByManageIdRequest, opts ...grpc.CallOption) (*AddManagerRoleRelationByManageIdResp, error)
	// 角色权限关系表
	ListRolePermissionRelation(ctx context.Context, in *ListRolePermissionRelationRequest, opts ...grpc.CallOption) (*ListRolePermissionRelationResp, error)
	AddRolePermissionRelation(ctx context.Context, in *AddRolePermissionRelationRequest, opts ...grpc.CallOption) (*AddRolePermissionRelationResp, error)
	ModRolePermissionRelation(ctx context.Context, in *ModRolePermissionRelationRequest, opts ...grpc.CallOption) (*ModRolePermissionRelationResp, error)
	DelRolePermissionRelation(ctx context.Context, in *DelRolePermissionRelationRequest, opts ...grpc.CallOption) (*DelRolePermissionRelationResp, error)
	// 发送验证码
	GetSmsCode(ctx context.Context, in *GetSmsCodeRequest, opts ...grpc.CallOption) (*GetSmsCodeResp, error)
	// 短信验证码登录
	LoginWithSmsCode(ctx context.Context, in *LoginWithSmsCodeRequest, opts ...grpc.CallOption) (*LoginWithSmsCodeResp, error)
	GetSmsCodeByCreateBusiness(ctx context.Context, in *GetSmsCodeByCreateBusinessRequest, opts ...grpc.CallOption) (*GetSmsCodeByCreateBusinessResp, error)
	GetBusinessById(ctx context.Context, in *GetBusinessByIdRequest, opts ...grpc.CallOption) (*GetBusinessByIdResp, error)
	GetPreAuthCode(ctx context.Context, in *GetPreAuthCodeReq, opts ...grpc.CallOption) (*GetPreAuthCodeResp, error)
	// 接收每10分钟的请求数据
	AuthorizationEventReceptionConfig(ctx context.Context, in *AuthorizationEventReceptionConfigReq, opts ...grpc.CallOption) (*AuthorizationEventReceptionConfigResp, error)
	GetAuthorizerAccessToken(ctx context.Context, in *GetAuthorizerAccessTokenReq, opts ...grpc.CallOption) (*GetAuthorizerAccessTokenResp, error)
	GetAuthorizerInfo(ctx context.Context, in *GetAuthorizerInfoReq, opts ...grpc.CallOption) (*GetAuthorizerInfoResp, error)
	ApiQueryAuth(ctx context.Context, in *ApiQueryAuthReq, opts ...grpc.CallOption) (*ApiQueryAuthResp, error)
	GetWechatOfficialAccountPlatform(ctx context.Context, in *GetWechatOfficialAccountPlatformReq, opts ...grpc.CallOption) (*GetWechatOfficialAccountPlatformResp, error)
	AddWechatOfficialAccountPlatform(ctx context.Context, in *AddWechatOfficialAccountPlatformReq, opts ...grpc.CallOption) (*AddWechatOfficialAccountPlatformResp, error)
	ModWechatOfficialAccountPlatform(ctx context.Context, in *ModWechatOfficialAccountPlatformReq, opts ...grpc.CallOption) (*ModWechatOfficialAccountPlatformResp, error)
	SimpleModUserInfo(ctx context.Context, in *SimpleModUserInfoReq, opts ...grpc.CallOption) (*SimpleModUserInfoResp, error)
	GetRoleInfoByShopId(ctx context.Context, in *GetRoleInfoByShopIdReq, opts ...grpc.CallOption) (*GetRoleInfoByShopIdResp, error)
	ListSystemEnum(ctx context.Context, in *ListSystemEnumRequest, opts ...grpc.CallOption) (*ListSystemEnumResp, error)
	ListScoreSetting(ctx context.Context, in *ListScoreSettingRequest, opts ...grpc.CallOption) (*ListScoreSettingResp, error)
	AddScoreSetting(ctx context.Context, in *AddScoreSettingRequest, opts ...grpc.CallOption) (*AddScoreSettingResp, error)
	ModScoreSetting(ctx context.Context, in *ModScoreSettingRequest, opts ...grpc.CallOption) (*ModScoreSettingResp, error)
	DelScoreSetting(ctx context.Context, in *DelScoreSettingRequest, opts ...grpc.CallOption) (*DelScoreSettingResp, error)
	AddWeiXinFans(ctx context.Context, in *AddWeiXinFansRequest, opts ...grpc.CallOption) (*AddWeiXinFansResp, error)
	DelWeiXinFans(ctx context.Context, in *DelWeiXinFansRequest, opts ...grpc.CallOption) (*DelWeiXinFansResp, error)
	GetAuthorizerAccessTokenByAppId(ctx context.Context, in *GetAuthorizerAccessTokenByAppIdRequest, opts ...grpc.CallOption) (*GetAuthorizerAccessTokenByAppIdResp, error)
	SCAN(ctx context.Context, in *SCANRequest, opts ...grpc.CallOption) (*SCANResp, error)
	// 套餐管理
	AddPackages(ctx context.Context, in *AddPackagesReq, opts ...grpc.CallOption) (*AddPackagesRsp, error)
	ListPackages(ctx context.Context, in *ListPackagesReq, opts ...grpc.CallOption) (*ListPackagesRsp, error)
	ModPackages(ctx context.Context, in *ModPackagesReq, opts ...grpc.CallOption) (*ModPackagesRsp, error)
	DelPackages(ctx context.Context, in *DelPackagesReq, opts ...grpc.CallOption) (*DelPackagesRsp, error)
	ListOrder(ctx context.Context, in *ListOrderReq, opts ...grpc.CallOption) (*ListOrderRsp, error)
	SCANByRecordId(ctx context.Context, in *SCANByRecordIdRequest, opts ...grpc.CallOption) (*SCANByRecordIdResp, error)
	// 获取oss信息
	GetOSSInfo(ctx context.Context, in *GetOssInfoRequest, opts ...grpc.CallOption) (*GetOssInfoResp, error)
	ExportDeviceUser(ctx context.Context, in *ExportDeviceUserRequest, opts ...grpc.CallOption) (*ExportDeviceUserResp, error)
	ExportMeasureSkinRecord(ctx context.Context, in *ExportExportMeasureSkinRecordRequest, opts ...grpc.CallOption) (*ExportExportMeasureSkinRecordResp, error)
	// 推荐文案管理
	AddSystemSaying(ctx context.Context, in *AddSystemSayingRequest, opts ...grpc.CallOption) (*AddSystemSayingResponse, error)
	ListSystemSaying(ctx context.Context, in *ListSystemSayingRequest, opts ...grpc.CallOption) (*ListSystemSayingResponse, error)
	ModSystemSaying(ctx context.Context, in *ModSystemSayingRequest, opts ...grpc.CallOption) (*ModSystemSayingResponse, error)
	DelSystemSaying(ctx context.Context, in *DelSystemSayingRequest, opts ...grpc.CallOption) (*DelSystemSayingResponse, error)
	OnOffSystemSaying(ctx context.Context, in *OnOffSystemSayingRequest, opts ...grpc.CallOption) (*OnOffSystemSayingResponse, error)
	// 推荐文案管理
	AddSkinType(ctx context.Context, in *AddSkinTypeRequest, opts ...grpc.CallOption) (*AddSkinTypeResponse, error)
	ListSkinType(ctx context.Context, in *ListSkinTypeRequest, opts ...grpc.CallOption) (*ListSkinTypeResponse, error)
	ModSkinType(ctx context.Context, in *ModSkinTypeRequest, opts ...grpc.CallOption) (*ModSkinTypeResponse, error)
	DelSkinType(ctx context.Context, in *DelSkinTypeRequest, opts ...grpc.CallOption) (*DelSkinTypeResponse, error)
	OnOffSkinType(ctx context.Context, in *OnOffSkinTypeRequest, opts ...grpc.CallOption) (*OnOffSkinTypeResponse, error)
	// 设置登录token信息
	SetLoginTokenCache(ctx context.Context, in *SetLoginTokenCacheReq, opts ...grpc.CallOption) (*SetLoginTokenCacheResp, error)
	// 获取登录token信息
	GetLoginTokenCache(ctx context.Context, in *GetLoginTokenCacheReq, opts ...grpc.CallOption) (*GetLoginTokenCacheResp, error)
}

type manageClient struct {
	cc grpc.ClientConnInterface
}

func NewManageClient(cc grpc.ClientConnInterface) ManageClient {
	return &manageClient{cc}
}

func (c *manageClient) Summary(ctx context.Context, in *SummaryRequest, opts ...grpc.CallOption) (*SummaryResp, error) {
	out := new(SummaryResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/Summary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ExportSummary(ctx context.Context, in *ExportSummaryRequest, opts ...grpc.CallOption) (*ExportSummaryResp, error) {
	out := new(ExportSummaryResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ExportSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListManager(ctx context.Context, in *ListManagerRequest, opts ...grpc.CallOption) (*ListManagerResp, error) {
	out := new(ListManagerResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModPasswd(ctx context.Context, in *ModPasswdRequest, opts ...grpc.CallOption) (*ModPasswdResp, error) {
	out := new(ModPasswdResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModPasswd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModUserInfo(ctx context.Context, in *ModUserInfoRequest, opts ...grpc.CallOption) (*ModUserInfoResp, error) {
	out := new(ModUserInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelUser(ctx context.Context, in *DelUserRequest, opts ...grpc.CallOption) (*DelUserResp, error) {
	out := new(DelUserResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResp, error) {
	out := new(AddUserResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ExportUser(ctx context.Context, in *ExportUserRequest, opts ...grpc.CallOption) (*ExportUserResp, error) {
	out := new(ExportUserResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ExportUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResp, error) {
	out := new(UploadFileResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddRoleInfo(ctx context.Context, in *AddRoleInfoRequest, opts ...grpc.CallOption) (*AddRoleInfoResp, error) {
	out := new(AddRoleInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddRoleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModRoleInfo(ctx context.Context, in *ModRoleInfoRequest, opts ...grpc.CallOption) (*ModRoleInfoResp, error) {
	out := new(ModRoleInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModRoleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelRoleInfo(ctx context.Context, in *DelRoleInfoRequest, opts ...grpc.CallOption) (*DelRoleInfoResp, error) {
	out := new(DelRoleInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelRoleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListRole(ctx context.Context, in *ListRoleRequest, opts ...grpc.CallOption) (*ListRoleResp, error) {
	out := new(ListRoleResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) FronzenRole(ctx context.Context, in *FrozenRoleRequest, opts ...grpc.CallOption) (*FrozenRoleResp, error) {
	out := new(FrozenRoleResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/FronzenRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) RecoverRole(ctx context.Context, in *RecoverRoleRequest, opts ...grpc.CallOption) (*RecoverRoleResp, error) {
	out := new(RecoverRoleResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/RecoverRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddMeasureSkinDimension(ctx context.Context, in *AddMeasureSkinDimensionRequest, opts ...grpc.CallOption) (*AddMeasureSkinDimensionResp, error) {
	out := new(AddMeasureSkinDimensionResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddMeasureSkinDimension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListMeasureSkinDimension(ctx context.Context, in *ListMeasureSkinDimensionRequest, opts ...grpc.CallOption) (*ListMeasureSkinDimensionResp, error) {
	out := new(ListMeasureSkinDimensionResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListMeasureSkinDimension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModMeasureSkinDimension(ctx context.Context, in *ModMeasureSkinDimensionRequest, opts ...grpc.CallOption) (*ModMeasureSkinDimensionResp, error) {
	out := new(ModMeasureSkinDimensionResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModMeasureSkinDimension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelMeasureSkinDimension(ctx context.Context, in *DelMeasureSkinDimensionRequest, opts ...grpc.CallOption) (*DelMeasureSkinDimensionResp, error) {
	out := new(DelMeasureSkinDimensionResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelMeasureSkinDimension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddMeasureDimensionSetting(ctx context.Context, in *AddMeasureDimensionSettingRequest, opts ...grpc.CallOption) (*AddMeasureDimensionSettingResp, error) {
	out := new(AddMeasureDimensionSettingResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddMeasureDimensionSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListMeasureDimensionSetting(ctx context.Context, in *ListMeasureDimensionSettingRequest, opts ...grpc.CallOption) (*ListMeasureDimensionSettingResp, error) {
	out := new(ListMeasureDimensionSettingResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListMeasureDimensionSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModMeasureDimensionSetting(ctx context.Context, in *ModMeasureDimensionSettingRequest, opts ...grpc.CallOption) (*ModMeasureDimensionSettingResp, error) {
	out := new(ModMeasureDimensionSettingResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModMeasureDimensionSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelMeasureDimensionSetting(ctx context.Context, in *DelMeasureDimensionSettingRequest, opts ...grpc.CallOption) (*DelMeasureDimensionSettingResp, error) {
	out := new(DelMeasureDimensionSettingResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelMeasureDimensionSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddReportSetting(ctx context.Context, in *AddReportSettingReq, opts ...grpc.CallOption) (*AddReportSettingRsp, error) {
	out := new(AddReportSettingRsp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddReportSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelReportSetting(ctx context.Context, in *DelReportSettingReq, opts ...grpc.CallOption) (*DelReportSettingRsp, error) {
	out := new(DelReportSettingRsp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelReportSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModReportSetting(ctx context.Context, in *ModReportSettingReq, opts ...grpc.CallOption) (*ModReportSettingRsp, error) {
	out := new(ModReportSettingRsp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModReportSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListReportSetting(ctx context.Context, in *ListReportSettingReq, opts ...grpc.CallOption) (*ListReportSettingRsp, error) {
	out := new(ListReportSettingRsp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListReportSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddProductDict(ctx context.Context, in *AddProductDictRequest, opts ...grpc.CallOption) (*AddProductDictResp, error) {
	out := new(AddProductDictResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddProductDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListProductDict(ctx context.Context, in *ListProductDictRequest, opts ...grpc.CallOption) (*ListProductDictResp, error) {
	out := new(ListProductDictResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListProductDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModProductDict(ctx context.Context, in *ModProductDictRequest, opts ...grpc.CallOption) (*ModProductDictResp, error) {
	out := new(ModProductDictResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModProductDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelProductDict(ctx context.Context, in *DelProductDictRequest, opts ...grpc.CallOption) (*DelProductDictResp, error) {
	out := new(DelProductDictResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelProductDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddDict(ctx context.Context, in *AddDictReq, opts ...grpc.CallOption) (*AddDictRsp, error) {
	out := new(AddDictRsp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelDict(ctx context.Context, in *DelDictReq, opts ...grpc.CallOption) (*DelDictRsp, error) {
	out := new(DelDictRsp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModDict(ctx context.Context, in *ModDictReq, opts ...grpc.CallOption) (*ModDictRsp, error) {
	out := new(ModDictRsp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListDict(ctx context.Context, in *ListDictReq, opts ...grpc.CallOption) (*ListDictRsp, error) {
	out := new(ListDictRsp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddTheme(ctx context.Context, in *AddThemeReq, opts ...grpc.CallOption) (*AddThemeRsp, error) {
	out := new(AddThemeRsp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelTheme(ctx context.Context, in *DelThemeReq, opts ...grpc.CallOption) (*DelThemeRsp, error) {
	out := new(DelThemeRsp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModTheme(ctx context.Context, in *ModThemeReq, opts ...grpc.CallOption) (*ModThemeRsp, error) {
	out := new(ModThemeRsp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListTheme(ctx context.Context, in *ListThemeReq, opts ...grpc.CallOption) (*ListThemeRsp, error) {
	out := new(ListThemeRsp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddPushMessage(ctx context.Context, in *AddPushMessageRequest, opts ...grpc.CallOption) (*AddPushMessageResp, error) {
	out := new(AddPushMessageResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddPushMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListPushMessage(ctx context.Context, in *ListPushMessageRequest, opts ...grpc.CallOption) (*ListPushMessageResp, error) {
	out := new(ListPushMessageResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListPushMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModPushMessage(ctx context.Context, in *ModPushMessageRequest, opts ...grpc.CallOption) (*ModPushMessageResp, error) {
	out := new(ModPushMessageResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModPushMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelPushMessage(ctx context.Context, in *DelPushMessageRequest, opts ...grpc.CallOption) (*DelPushMessageResp, error) {
	out := new(DelPushMessageResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelPushMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListIssue(ctx context.Context, in *ListIssueRequest, opts ...grpc.CallOption) (*ListIssueResp, error) {
	out := new(ListIssueResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModIssue(ctx context.Context, in *ModIssueRequest, opts ...grpc.CallOption) (*ModIssueResp, error) {
	out := new(ModIssueResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelIssue(ctx context.Context, in *DelIssueRequest, opts ...grpc.CallOption) (*DelIssueResp, error) {
	out := new(DelIssueResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResp, error) {
	out := new(ListMachinesResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddMachines(ctx context.Context, in *AddMachinesRequest, opts ...grpc.CallOption) (*AddMachinesResp, error) {
	out := new(AddMachinesResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelMachines(ctx context.Context, in *DelMachinesRequest, opts ...grpc.CallOption) (*DelMachinesResp, error) {
	out := new(DelMachinesResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModMachines(ctx context.Context, in *ModMachinesRequest, opts ...grpc.CallOption) (*ModMachinesResp, error) {
	out := new(ModMachinesResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListMachinesIdleRes(ctx context.Context, in *ListMachinesIdleResRequest, opts ...grpc.CallOption) (*ListMachinesIdleResResp, error) {
	out := new(ListMachinesIdleResResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListMachinesIdleRes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddMachinesIdleRes(ctx context.Context, in *AddMachinesIdleResRequest, opts ...grpc.CallOption) (*AddMachinesIdleResResp, error) {
	out := new(AddMachinesIdleResResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddMachinesIdleRes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelMachinesIdleRes(ctx context.Context, in *DelMachinesIdleResRequest, opts ...grpc.CallOption) (*DelMachinesIdleResResp, error) {
	out := new(DelMachinesIdleResResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelMachinesIdleRes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModMachinesIdleRes(ctx context.Context, in *ModMachinesIdleResRequest, opts ...grpc.CallOption) (*ModMachinesIdleResResp, error) {
	out := new(ModMachinesIdleResResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModMachinesIdleRes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListSkinCareProduct(ctx context.Context, in *ListSkinCareProductRequest, opts ...grpc.CallOption) (*ListSkinCareProductResp, error) {
	out := new(ListSkinCareProductResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListSkinCareProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddSkinCareProduct(ctx context.Context, in *AddSkinCareProductRequest, opts ...grpc.CallOption) (*AddSkinCareProductResp, error) {
	out := new(AddSkinCareProductResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddSkinCareProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelSkinCareProduct(ctx context.Context, in *DelSkinCareProductRequest, opts ...grpc.CallOption) (*DelSkinCareProductResp, error) {
	out := new(DelSkinCareProductResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelSkinCareProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModSkinCareProduct(ctx context.Context, in *ModSkinCareProductRequest, opts ...grpc.CallOption) (*ModSkinCareProductResp, error) {
	out := new(ModSkinCareProductResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModSkinCareProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) UpSkinCareProduct(ctx context.Context, in *UpSkinCareProductRequest, opts ...grpc.CallOption) (*UpSkinCareProductResp, error) {
	out := new(UpSkinCareProductResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/UpSkinCareProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DownSkinCareProduct(ctx context.Context, in *DownSkinCareProductRequest, opts ...grpc.CallOption) (*DownSkinCareProductResp, error) {
	out := new(DownSkinCareProductResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DownSkinCareProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) BatchSyncRecommendProduct(ctx context.Context, in *BatchSyncRecommendProductReq, opts ...grpc.CallOption) (*BatchSyncRecommendProductRsp, error) {
	out := new(BatchSyncRecommendProductRsp)
	err := c.cc.Invoke(ctx, "/manage.Manage/BatchSyncRecommendProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) BatchSyncRecommendProject(ctx context.Context, in *BatchSyncRecommendProjectReq, opts ...grpc.CallOption) (*BatchSyncRecommendProjectRsp, error) {
	out := new(BatchSyncRecommendProjectRsp)
	err := c.cc.Invoke(ctx, "/manage.Manage/BatchSyncRecommendProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddSkinCareProject(ctx context.Context, in *AddSkinCareProjectReq, opts ...grpc.CallOption) (*AddSkinCareProjectRsp, error) {
	out := new(AddSkinCareProjectRsp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddSkinCareProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelSkinCareProject(ctx context.Context, in *DelSkinCareProjectReq, opts ...grpc.CallOption) (*DelSkinCareProjectRsp, error) {
	out := new(DelSkinCareProjectRsp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelSkinCareProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModSkinCareProject(ctx context.Context, in *ModSkinCareProjectReq, opts ...grpc.CallOption) (*ModSkinCareProjectRsp, error) {
	out := new(ModSkinCareProjectRsp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModSkinCareProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListSkinCareProject(ctx context.Context, in *ListSkinCareProjectReq, opts ...grpc.CallOption) (*ListSkinCareProjectRsp, error) {
	out := new(ListSkinCareProjectRsp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListSkinCareProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) OnOffSkinCareProject(ctx context.Context, in *OnOffSkinCareProjectReq, opts ...grpc.CallOption) (*OnOffSkinCareProjectRsp, error) {
	out := new(OnOffSkinCareProjectRsp)
	err := c.cc.Invoke(ctx, "/manage.Manage/OnOffSkinCareProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListCosmeticsProduct(ctx context.Context, in *ListCosmeticsProductRequest, opts ...grpc.CallOption) (*ListCosmeticsProductResp, error) {
	out := new(ListCosmeticsProductResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListCosmeticsProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddCosmeticsProduct(ctx context.Context, in *AddCosmeticsProductRequest, opts ...grpc.CallOption) (*AddCosmeticsProductResp, error) {
	out := new(AddCosmeticsProductResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddCosmeticsProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelCosmeticsProduct(ctx context.Context, in *DelCosmeticsProductRequest, opts ...grpc.CallOption) (*DelCosmeticsProductResp, error) {
	out := new(DelCosmeticsProductResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelCosmeticsProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModCosmeticsProduct(ctx context.Context, in *ModCosmeticsProductRequest, opts ...grpc.CallOption) (*ModCosmeticsProductResp, error) {
	out := new(ModCosmeticsProductResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModCosmeticsProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) UpCosmeticsProduct(ctx context.Context, in *UpCosmeticsProductRequest, opts ...grpc.CallOption) (*UpCosmeticsProductResp, error) {
	out := new(UpCosmeticsProductResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/UpCosmeticsProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DownCosmeticsProduct(ctx context.Context, in *DownCosmeticsProductRequest, opts ...grpc.CallOption) (*DownCosmeticsProductResp, error) {
	out := new(DownCosmeticsProductResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DownCosmeticsProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListMichellPhan(ctx context.Context, in *ListMichellPhanRequest, opts ...grpc.CallOption) (*ListMichellPhanResp, error) {
	out := new(ListMichellPhanResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListMichellPhan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddMichellPhan(ctx context.Context, in *AddMichellPhanRequest, opts ...grpc.CallOption) (*AddMichellPhanResp, error) {
	out := new(AddMichellPhanResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddMichellPhan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelMichellPhan(ctx context.Context, in *DelMichellPhanRequest, opts ...grpc.CallOption) (*DelMichellPhanResp, error) {
	out := new(DelMichellPhanResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelMichellPhan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModMichellPhan(ctx context.Context, in *ModMichellPhanRequest, opts ...grpc.CallOption) (*ModMichellPhanResp, error) {
	out := new(ModMichellPhanResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModMichellPhan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListSkinCareAdvice(ctx context.Context, in *ListSkinCareAdviceRequest, opts ...grpc.CallOption) (*ListSkinCareAdviceResp, error) {
	out := new(ListSkinCareAdviceResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListSkinCareAdvice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddSkinCareAdvice(ctx context.Context, in *AddSkinCareAdviceRequest, opts ...grpc.CallOption) (*AddSkinCareAdviceResp, error) {
	out := new(AddSkinCareAdviceResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddSkinCareAdvice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelSkinCareAdvice(ctx context.Context, in *DelSkinCareAdviceRequest, opts ...grpc.CallOption) (*DelSkinCareAdviceResp, error) {
	out := new(DelSkinCareAdviceResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelSkinCareAdvice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModSkinCareAdvice(ctx context.Context, in *ModSkinCareAdviceRequest, opts ...grpc.CallOption) (*ModSkinCareAdviceResp, error) {
	out := new(ModSkinCareAdviceResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModSkinCareAdvice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) UpSkinCareAdvice(ctx context.Context, in *UpSkinCareAdviceRequest, opts ...grpc.CallOption) (*UpSkinCareAdviceResp, error) {
	out := new(UpSkinCareAdviceResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/UpSkinCareAdvice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DownSkinCareAdvice(ctx context.Context, in *DownSkinCareAdviceRequest, opts ...grpc.CallOption) (*DownSkinCareAdviceResp, error) {
	out := new(DownSkinCareAdviceResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DownSkinCareAdvice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListMeasureSkinRecord(ctx context.Context, in *ListMeasureSkinRecordRequest, opts ...grpc.CallOption) (*ListMeasureSkinRecordResp, error) {
	out := new(ListMeasureSkinRecordResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListMeasureSkinRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetMeasureSkinDetail(ctx context.Context, in *GetMeasureSkinDetailRequest, opts ...grpc.CallOption) (*GetMeasureSkinDetailResp, error) {
	out := new(GetMeasureSkinDetailResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/GetMeasureSkinDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelMeasureSkinRecord(ctx context.Context, in *DelMeasureSkinRecordRequest, opts ...grpc.CallOption) (*DelMeasureSkinRecordResp, error) {
	out := new(DelMeasureSkinRecordResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelMeasureSkinRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListProductRecommendationWeightSetting(ctx context.Context, in *ListProductRecommendationWeightSettingRequest, opts ...grpc.CallOption) (*ListProductRecommendationWeightSettingResp, error) {
	out := new(ListProductRecommendationWeightSettingResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListProductRecommendationWeightSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddProductRecommendationWeightSetting(ctx context.Context, in *AddProductRecommendationWeightSettingRequest, opts ...grpc.CallOption) (*AddProductRecommendationWeightSettingResp, error) {
	out := new(AddProductRecommendationWeightSettingResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddProductRecommendationWeightSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelProductRecommendationWeightSetting(ctx context.Context, in *DelProductRecommendationWeightSettingRequest, opts ...grpc.CallOption) (*DelProductRecommendationWeightSettingResp, error) {
	out := new(DelProductRecommendationWeightSettingResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelProductRecommendationWeightSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModProductRecommendationWeightSetting(ctx context.Context, in *ModProductRecommendationWeightSettingRequest, opts ...grpc.CallOption) (*ModProductRecommendationWeightSettingResp, error) {
	out := new(ModProductRecommendationWeightSettingResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModProductRecommendationWeightSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListDeviceUser(ctx context.Context, in *ListDeviceUserRequest, opts ...grpc.CallOption) (*ListDeviceUserResp, error) {
	out := new(ListDeviceUserResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListDeviceUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) FrozenDeviceUser(ctx context.Context, in *FrozenDeviceUserRequest, opts ...grpc.CallOption) (*FrozenDeviceUserResp, error) {
	out := new(FrozenDeviceUserResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/FrozenDeviceUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) RecoverDeviceUser(ctx context.Context, in *RecoverDeviceUserRequest, opts ...grpc.CallOption) (*RecoverDeviceUserResp, error) {
	out := new(RecoverDeviceUserResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/RecoverDeviceUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddCourseClassInfo(ctx context.Context, in *AddCourseClassInfoRequest, opts ...grpc.CallOption) (*AddCourseClassInfoResp, error) {
	out := new(AddCourseClassInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddCourseClassInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModCourseClassInfo(ctx context.Context, in *ModCourseClassInfoRequest, opts ...grpc.CallOption) (*ModCourseClassInfoResp, error) {
	out := new(ModCourseClassInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModCourseClassInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelCourseClassInfo(ctx context.Context, in *DelCourseClassInfoRequest, opts ...grpc.CallOption) (*DelCourseClassInfoResp, error) {
	out := new(DelCourseClassInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelCourseClassInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListCourseClass(ctx context.Context, in *ListCourseClassRequest, opts ...grpc.CallOption) (*ListCourseClassResp, error) {
	out := new(ListCourseClassResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListCourseClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetCourseClassNameList(ctx context.Context, in *GetCourseClassNameListRequest, opts ...grpc.CallOption) (*GetCourseClassNameListResp, error) {
	out := new(GetCourseClassNameListResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/GetCourseClassNameList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) UpCourseClass(ctx context.Context, in *UpCourseClassRequest, opts ...grpc.CallOption) (*UpCourseClassResp, error) {
	out := new(UpCourseClassResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/UpCourseClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DownCourseClass(ctx context.Context, in *DownCourseClassRequest, opts ...grpc.CallOption) (*DownCourseClassResp, error) {
	out := new(DownCourseClassResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DownCourseClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetYouZanOnSaleList(ctx context.Context, in *GetYouZanOnSaleListRequest, opts ...grpc.CallOption) (*GetYouZanOnSaleListResp, error) {
	out := new(GetYouZanOnSaleListResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/GetYouZanOnSaleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetYouZanItemDetail(ctx context.Context, in *GetYouZanItemDetailRequest, opts ...grpc.CallOption) (*GetYouZanItemDetailResp, error) {
	out := new(GetYouZanItemDetailResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/GetYouZanItemDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddWiseManInfo(ctx context.Context, in *AddWiseManInfoRequest, opts ...grpc.CallOption) (*AddWiseManInfoResp, error) {
	out := new(AddWiseManInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddWiseManInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModWiseManInfo(ctx context.Context, in *ModWiseManInfoRequest, opts ...grpc.CallOption) (*ModWiseManInfoResp, error) {
	out := new(ModWiseManInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModWiseManInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelWiseManInfo(ctx context.Context, in *DelWiseManInfoRequest, opts ...grpc.CallOption) (*DelWiseManInfoResp, error) {
	out := new(DelWiseManInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelWiseManInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListWiseMan(ctx context.Context, in *ListWiseManRequest, opts ...grpc.CallOption) (*ListWiseManResp, error) {
	out := new(ListWiseManResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListWiseMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetWiseManNameList(ctx context.Context, in *GetWiseManNameListRequest, opts ...grpc.CallOption) (*GetWiseManNameListResp, error) {
	out := new(GetWiseManNameListResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/GetWiseManNameList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) UpWiseMan(ctx context.Context, in *UpWiseManRequest, opts ...grpc.CallOption) (*UpWiseManResp, error) {
	out := new(UpWiseManResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/UpWiseMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DownWiseMan(ctx context.Context, in *DownWiseManRequest, opts ...grpc.CallOption) (*DownWiseManResp, error) {
	out := new(DownWiseManResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DownWiseMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddCourseInfo(ctx context.Context, in *AddCourseInfoRequest, opts ...grpc.CallOption) (*AddCourseInfoResp, error) {
	out := new(AddCourseInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddCourseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModCourseInfo(ctx context.Context, in *ModCourseInfoRequest, opts ...grpc.CallOption) (*ModCourseInfoResp, error) {
	out := new(ModCourseInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModCourseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelCourseInfo(ctx context.Context, in *DelCourseInfoRequest, opts ...grpc.CallOption) (*DelCourseInfoResp, error) {
	out := new(DelCourseInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelCourseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListCourse(ctx context.Context, in *ListCourseRequest, opts ...grpc.CallOption) (*ListCourseResp, error) {
	out := new(ListCourseResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListCanRecommendCourseName(ctx context.Context, in *ListCanRecommendCourseNameRequest, opts ...grpc.CallOption) (*ListCanRecommendCourseNameResp, error) {
	out := new(ListCanRecommendCourseNameResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListCanRecommendCourseName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListCourseStepAndProduct(ctx context.Context, in *ListCourseStepAndProductRequest, opts ...grpc.CallOption) (*ListCourseStepAndProductResp, error) {
	out := new(ListCourseStepAndProductResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListCourseStepAndProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) UpCourse(ctx context.Context, in *UpCourseRequest, opts ...grpc.CallOption) (*UpCourseResp, error) {
	out := new(UpCourseResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/UpCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DownCourse(ctx context.Context, in *DownCourseRequest, opts ...grpc.CallOption) (*DownCourseResp, error) {
	out := new(DownCourseResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DownCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddCourseRecommendInfo(ctx context.Context, in *AddCourseRecommendInfoRequest, opts ...grpc.CallOption) (*AddCourseRecommendInfoResp, error) {
	out := new(AddCourseRecommendInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddCourseRecommendInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModCourseRecommendInfo(ctx context.Context, in *ModCourseRecommendInfoRequest, opts ...grpc.CallOption) (*ModCourseRecommendInfoResp, error) {
	out := new(ModCourseRecommendInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModCourseRecommendInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelCourseRecommendInfo(ctx context.Context, in *DelCourseRecommendInfoRequest, opts ...grpc.CallOption) (*DelCourseRecommendInfoResp, error) {
	out := new(DelCourseRecommendInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelCourseRecommendInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListCourseRecommend(ctx context.Context, in *ListCourseRecommendRequest, opts ...grpc.CallOption) (*ListCourseRecommendResp, error) {
	out := new(ListCourseRecommendResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListCourseRecommend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) UpCourseRecommend(ctx context.Context, in *UpCourseRecommendRequest, opts ...grpc.CallOption) (*UpCourseRecommendResp, error) {
	out := new(UpCourseRecommendResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/UpCourseRecommend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DownCourseRecommend(ctx context.Context, in *DownCourseRecommendRequest, opts ...grpc.CallOption) (*DownCourseRecommendResp, error) {
	out := new(DownCourseRecommendResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DownCourseRecommend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddDoctorInfo(ctx context.Context, in *AddDoctorInfoRequest, opts ...grpc.CallOption) (*AddDoctorInfoResp, error) {
	out := new(AddDoctorInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddDoctorInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModDoctorInfo(ctx context.Context, in *ModDoctorInfoRequest, opts ...grpc.CallOption) (*ModDoctorInfoResp, error) {
	out := new(ModDoctorInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModDoctorInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelDoctorInfo(ctx context.Context, in *DelDoctorInfoRequest, opts ...grpc.CallOption) (*DelDoctorInfoResp, error) {
	out := new(DelDoctorInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelDoctorInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListDoctor(ctx context.Context, in *ListDoctorRequest, opts ...grpc.CallOption) (*ListDoctorResp, error) {
	out := new(ListDoctorResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListDoctor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) UpDoctor(ctx context.Context, in *UpDoctorRequest, opts ...grpc.CallOption) (*UpDoctorResp, error) {
	out := new(UpDoctorResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/UpDoctor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DownDoctor(ctx context.Context, in *DownDoctorRequest, opts ...grpc.CallOption) (*DownDoctorResp, error) {
	out := new(DownDoctorResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DownDoctor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddOperationLog(ctx context.Context, in *AddOperationLogRequest, opts ...grpc.CallOption) (*AddOperationLogResp, error) {
	out := new(AddOperationLogResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddOperationLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListOperationLog(ctx context.Context, in *ListOperationLogRequest, opts ...grpc.CallOption) (*ListOperationLogResp, error) {
	out := new(ListOperationLogResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListOperationLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListImportTask(ctx context.Context, in *ListImportTaskRequest, opts ...grpc.CallOption) (*ListImportTaskResp, error) {
	out := new(ListImportTaskResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListImportTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddImportTask(ctx context.Context, in *AddImportTaskRequest, opts ...grpc.CallOption) (*AddImportTaskResp, error) {
	out := new(AddImportTaskResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddImportTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListDataPoint(ctx context.Context, in *ListDataPointRequest, opts ...grpc.CallOption) (*ListDataPointResp, error) {
	out := new(ListDataPointResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListDataPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddDeviceVersionInfo(ctx context.Context, in *AddDeviceVersionRequest, opts ...grpc.CallOption) (*AddDeviceVersionResp, error) {
	out := new(AddDeviceVersionResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddDeviceVersionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModDeviceVersionInfo(ctx context.Context, in *ModDeviceVersionRequest, opts ...grpc.CallOption) (*ModDeviceVersionResp, error) {
	out := new(ModDeviceVersionResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModDeviceVersionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelDeviceVersionInfo(ctx context.Context, in *DelDeviceVersionRequest, opts ...grpc.CallOption) (*DelDeviceVersionResp, error) {
	out := new(DelDeviceVersionResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelDeviceVersionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListDeviceVersion(ctx context.Context, in *ListDeviceVersionRequest, opts ...grpc.CallOption) (*ListDeviceVersionResp, error) {
	out := new(ListDeviceVersionResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListDeviceVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListCheckPasswordList(ctx context.Context, in *GetCheckPasswordListRequest, opts ...grpc.CallOption) (*GetCheckPasswordListResp, error) {
	out := new(GetCheckPasswordListResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListCheckPasswordList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SetCheckPasswordTimer(ctx context.Context, in *SetCheckPasswordTimerRequest, opts ...grpc.CallOption) (*SetCheckPasswordTimerResp, error) {
	out := new(SetCheckPasswordTimerResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/SetCheckPasswordTimer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListWhiteList(ctx context.Context, in *GetListWhiteListRequest, opts ...grpc.CallOption) (*GetListWhiteListResp, error) {
	out := new(GetListWhiteListResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddWhiteList(ctx context.Context, in *AddListWhiteListRequest, opts ...grpc.CallOption) (*AddListWhiteListResp, error) {
	out := new(AddListWhiteListResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelWhiteList(ctx context.Context, in *DelListWhiteListRequest, opts ...grpc.CallOption) (*DelListWhiteListResp, error) {
	out := new(DelListWhiteListResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SyncWhiteList(ctx context.Context, in *SyncWhiteListRequest, opts ...grpc.CallOption) (*SyncWhiteListResp, error) {
	out := new(SyncWhiteListResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/SyncWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListAppConfig(ctx context.Context, in *ListAppConfigRequest, opts ...grpc.CallOption) (*ListAppConfigResp, error) {
	out := new(ListAppConfigResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListAppConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddAppConfig(ctx context.Context, in *AddAppConfigRequest, opts ...grpc.CallOption) (*AddAppConfigResp, error) {
	out := new(AddAppConfigResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddAppConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelAppConfig(ctx context.Context, in *DelAppConfigRequest, opts ...grpc.CallOption) (*DelAppConfigResp, error) {
	out := new(DelAppConfigResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelAppConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModAppConfig(ctx context.Context, in *ModAppConfigRequest, opts ...grpc.CallOption) (*ModAppConfigResp, error) {
	out := new(ModAppConfigResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModAppConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SyncAppConfig(ctx context.Context, in *SyncAppConfigRequest, opts ...grpc.CallOption) (*SyncAppConfigResp, error) {
	out := new(SyncAppConfigResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/SyncAppConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListBusiness(ctx context.Context, in *ListBusinessRequest, opts ...grpc.CallOption) (*ListBusinessResp, error) {
	out := new(ListBusinessResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) CreateBusiness(ctx context.Context, in *CreateBusinessRequest, opts ...grpc.CallOption) (*CreateBusinessResp, error) {
	out := new(CreateBusinessResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/CreateBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddBusiness(ctx context.Context, in *AddBusinessRequest, opts ...grpc.CallOption) (*AddBusinessResp, error) {
	out := new(AddBusinessResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModBusiness(ctx context.Context, in *ModBusinessRequest, opts ...grpc.CallOption) (*ModBusinessResp, error) {
	out := new(ModBusinessResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelBusiness(ctx context.Context, in *DelBusinessRequest, opts ...grpc.CallOption) (*DelBusinessResp, error) {
	out := new(DelBusinessResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListShopInfo(ctx context.Context, in *ListShopInfoRequest, opts ...grpc.CallOption) (*ListShopInfoResp, error) {
	out := new(ListShopInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListShopInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddShopInfo(ctx context.Context, in *AddShopInfoRequest, opts ...grpc.CallOption) (*AddShopInfoResp, error) {
	out := new(AddShopInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddShopInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModShopInfo(ctx context.Context, in *ModShopInfoRequest, opts ...grpc.CallOption) (*ModShopInfoResp, error) {
	out := new(ModShopInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModShopInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelShopInfo(ctx context.Context, in *DelShopInfoRequest, opts ...grpc.CallOption) (*DelShopInfoResp, error) {
	out := new(DelShopInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelShopInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListPermission(ctx context.Context, in *ListPermissionRequest, opts ...grpc.CallOption) (*ListPermissionResp, error) {
	out := new(ListPermissionResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddPermission(ctx context.Context, in *AddPermissionRequest, opts ...grpc.CallOption) (*AddPermissionResp, error) {
	out := new(AddPermissionResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModPermission(ctx context.Context, in *ModPermissionRequest, opts ...grpc.CallOption) (*ModPermissionResp, error) {
	out := new(ModPermissionResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelPermission(ctx context.Context, in *DelPermissionRequest, opts ...grpc.CallOption) (*DelPermissionResp, error) {
	out := new(DelPermissionResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetListPermissionByRoleId(ctx context.Context, in *ListPermissionByRoleIdRequest, opts ...grpc.CallOption) (*ListPermissionByRoleIdResp, error) {
	out := new(ListPermissionByRoleIdResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/GetListPermissionByRoleId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetListPermissionByManageId(ctx context.Context, in *ListPermissionByManageIdRequest, opts ...grpc.CallOption) (*ListPermissionByManageIdResp, error) {
	out := new(ListPermissionByManageIdResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/GetListPermissionByManageId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListManagerRoleRelation(ctx context.Context, in *ListManagerRoleRelationRequest, opts ...grpc.CallOption) (*ListManagerRoleRelationResp, error) {
	out := new(ListManagerRoleRelationResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListManagerRoleRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddManagerRoleRelation(ctx context.Context, in *AddManagerRoleRelationRequest, opts ...grpc.CallOption) (*AddManagerRoleRelationResp, error) {
	out := new(AddManagerRoleRelationResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddManagerRoleRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModManagerRoleRelation(ctx context.Context, in *ModManagerRoleRelationRequest, opts ...grpc.CallOption) (*ModManagerRoleRelationResp, error) {
	out := new(ModManagerRoleRelationResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModManagerRoleRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelManagerRoleRelation(ctx context.Context, in *DelManagerRoleRelationRequest, opts ...grpc.CallOption) (*DelManagerRoleRelationResp, error) {
	out := new(DelManagerRoleRelationResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelManagerRoleRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListManagerRoleRelationByManageId(ctx context.Context, in *ListManagerRoleRelationByManageIdRequest, opts ...grpc.CallOption) (*ListManagerRoleRelationByManageIdResp, error) {
	out := new(ListManagerRoleRelationByManageIdResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListManagerRoleRelationByManageId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelManagerRoleRelationByManageId(ctx context.Context, in *DelManagerRoleRelationByManageIdRequest, opts ...grpc.CallOption) (*DelManagerRoleRelationByManageIdResp, error) {
	out := new(DelManagerRoleRelationByManageIdResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelManagerRoleRelationByManageId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddManagerRoleRelationByManageId(ctx context.Context, in *AddManagerRoleRelationByManageIdRequest, opts ...grpc.CallOption) (*AddManagerRoleRelationByManageIdResp, error) {
	out := new(AddManagerRoleRelationByManageIdResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddManagerRoleRelationByManageId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListRolePermissionRelation(ctx context.Context, in *ListRolePermissionRelationRequest, opts ...grpc.CallOption) (*ListRolePermissionRelationResp, error) {
	out := new(ListRolePermissionRelationResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListRolePermissionRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddRolePermissionRelation(ctx context.Context, in *AddRolePermissionRelationRequest, opts ...grpc.CallOption) (*AddRolePermissionRelationResp, error) {
	out := new(AddRolePermissionRelationResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddRolePermissionRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModRolePermissionRelation(ctx context.Context, in *ModRolePermissionRelationRequest, opts ...grpc.CallOption) (*ModRolePermissionRelationResp, error) {
	out := new(ModRolePermissionRelationResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModRolePermissionRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelRolePermissionRelation(ctx context.Context, in *DelRolePermissionRelationRequest, opts ...grpc.CallOption) (*DelRolePermissionRelationResp, error) {
	out := new(DelRolePermissionRelationResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelRolePermissionRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetSmsCode(ctx context.Context, in *GetSmsCodeRequest, opts ...grpc.CallOption) (*GetSmsCodeResp, error) {
	out := new(GetSmsCodeResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/GetSmsCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) LoginWithSmsCode(ctx context.Context, in *LoginWithSmsCodeRequest, opts ...grpc.CallOption) (*LoginWithSmsCodeResp, error) {
	out := new(LoginWithSmsCodeResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/LoginWithSmsCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetSmsCodeByCreateBusiness(ctx context.Context, in *GetSmsCodeByCreateBusinessRequest, opts ...grpc.CallOption) (*GetSmsCodeByCreateBusinessResp, error) {
	out := new(GetSmsCodeByCreateBusinessResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/GetSmsCodeByCreateBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetBusinessById(ctx context.Context, in *GetBusinessByIdRequest, opts ...grpc.CallOption) (*GetBusinessByIdResp, error) {
	out := new(GetBusinessByIdResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/GetBusinessById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetPreAuthCode(ctx context.Context, in *GetPreAuthCodeReq, opts ...grpc.CallOption) (*GetPreAuthCodeResp, error) {
	out := new(GetPreAuthCodeResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/GetPreAuthCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AuthorizationEventReceptionConfig(ctx context.Context, in *AuthorizationEventReceptionConfigReq, opts ...grpc.CallOption) (*AuthorizationEventReceptionConfigResp, error) {
	out := new(AuthorizationEventReceptionConfigResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AuthorizationEventReceptionConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetAuthorizerAccessToken(ctx context.Context, in *GetAuthorizerAccessTokenReq, opts ...grpc.CallOption) (*GetAuthorizerAccessTokenResp, error) {
	out := new(GetAuthorizerAccessTokenResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/GetAuthorizerAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetAuthorizerInfo(ctx context.Context, in *GetAuthorizerInfoReq, opts ...grpc.CallOption) (*GetAuthorizerInfoResp, error) {
	out := new(GetAuthorizerInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/GetAuthorizerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ApiQueryAuth(ctx context.Context, in *ApiQueryAuthReq, opts ...grpc.CallOption) (*ApiQueryAuthResp, error) {
	out := new(ApiQueryAuthResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ApiQueryAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetWechatOfficialAccountPlatform(ctx context.Context, in *GetWechatOfficialAccountPlatformReq, opts ...grpc.CallOption) (*GetWechatOfficialAccountPlatformResp, error) {
	out := new(GetWechatOfficialAccountPlatformResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/GetWechatOfficialAccountPlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddWechatOfficialAccountPlatform(ctx context.Context, in *AddWechatOfficialAccountPlatformReq, opts ...grpc.CallOption) (*AddWechatOfficialAccountPlatformResp, error) {
	out := new(AddWechatOfficialAccountPlatformResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddWechatOfficialAccountPlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModWechatOfficialAccountPlatform(ctx context.Context, in *ModWechatOfficialAccountPlatformReq, opts ...grpc.CallOption) (*ModWechatOfficialAccountPlatformResp, error) {
	out := new(ModWechatOfficialAccountPlatformResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModWechatOfficialAccountPlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SimpleModUserInfo(ctx context.Context, in *SimpleModUserInfoReq, opts ...grpc.CallOption) (*SimpleModUserInfoResp, error) {
	out := new(SimpleModUserInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/SimpleModUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetRoleInfoByShopId(ctx context.Context, in *GetRoleInfoByShopIdReq, opts ...grpc.CallOption) (*GetRoleInfoByShopIdResp, error) {
	out := new(GetRoleInfoByShopIdResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/GetRoleInfoByShopId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListSystemEnum(ctx context.Context, in *ListSystemEnumRequest, opts ...grpc.CallOption) (*ListSystemEnumResp, error) {
	out := new(ListSystemEnumResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListSystemEnum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListScoreSetting(ctx context.Context, in *ListScoreSettingRequest, opts ...grpc.CallOption) (*ListScoreSettingResp, error) {
	out := new(ListScoreSettingResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListScoreSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddScoreSetting(ctx context.Context, in *AddScoreSettingRequest, opts ...grpc.CallOption) (*AddScoreSettingResp, error) {
	out := new(AddScoreSettingResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddScoreSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModScoreSetting(ctx context.Context, in *ModScoreSettingRequest, opts ...grpc.CallOption) (*ModScoreSettingResp, error) {
	out := new(ModScoreSettingResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModScoreSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelScoreSetting(ctx context.Context, in *DelScoreSettingRequest, opts ...grpc.CallOption) (*DelScoreSettingResp, error) {
	out := new(DelScoreSettingResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelScoreSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddWeiXinFans(ctx context.Context, in *AddWeiXinFansRequest, opts ...grpc.CallOption) (*AddWeiXinFansResp, error) {
	out := new(AddWeiXinFansResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddWeiXinFans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelWeiXinFans(ctx context.Context, in *DelWeiXinFansRequest, opts ...grpc.CallOption) (*DelWeiXinFansResp, error) {
	out := new(DelWeiXinFansResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelWeiXinFans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetAuthorizerAccessTokenByAppId(ctx context.Context, in *GetAuthorizerAccessTokenByAppIdRequest, opts ...grpc.CallOption) (*GetAuthorizerAccessTokenByAppIdResp, error) {
	out := new(GetAuthorizerAccessTokenByAppIdResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/GetAuthorizerAccessTokenByAppId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SCAN(ctx context.Context, in *SCANRequest, opts ...grpc.CallOption) (*SCANResp, error) {
	out := new(SCANResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/SCAN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddPackages(ctx context.Context, in *AddPackagesReq, opts ...grpc.CallOption) (*AddPackagesRsp, error) {
	out := new(AddPackagesRsp)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListPackages(ctx context.Context, in *ListPackagesReq, opts ...grpc.CallOption) (*ListPackagesRsp, error) {
	out := new(ListPackagesRsp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModPackages(ctx context.Context, in *ModPackagesReq, opts ...grpc.CallOption) (*ModPackagesRsp, error) {
	out := new(ModPackagesRsp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelPackages(ctx context.Context, in *DelPackagesReq, opts ...grpc.CallOption) (*DelPackagesRsp, error) {
	out := new(DelPackagesRsp)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListOrder(ctx context.Context, in *ListOrderReq, opts ...grpc.CallOption) (*ListOrderRsp, error) {
	out := new(ListOrderRsp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SCANByRecordId(ctx context.Context, in *SCANByRecordIdRequest, opts ...grpc.CallOption) (*SCANByRecordIdResp, error) {
	out := new(SCANByRecordIdResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/SCANByRecordId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetOSSInfo(ctx context.Context, in *GetOssInfoRequest, opts ...grpc.CallOption) (*GetOssInfoResp, error) {
	out := new(GetOssInfoResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/GetOSSInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ExportDeviceUser(ctx context.Context, in *ExportDeviceUserRequest, opts ...grpc.CallOption) (*ExportDeviceUserResp, error) {
	out := new(ExportDeviceUserResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ExportDeviceUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ExportMeasureSkinRecord(ctx context.Context, in *ExportExportMeasureSkinRecordRequest, opts ...grpc.CallOption) (*ExportExportMeasureSkinRecordResp, error) {
	out := new(ExportExportMeasureSkinRecordResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/ExportMeasureSkinRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddSystemSaying(ctx context.Context, in *AddSystemSayingRequest, opts ...grpc.CallOption) (*AddSystemSayingResponse, error) {
	out := new(AddSystemSayingResponse)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddSystemSaying", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListSystemSaying(ctx context.Context, in *ListSystemSayingRequest, opts ...grpc.CallOption) (*ListSystemSayingResponse, error) {
	out := new(ListSystemSayingResponse)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListSystemSaying", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModSystemSaying(ctx context.Context, in *ModSystemSayingRequest, opts ...grpc.CallOption) (*ModSystemSayingResponse, error) {
	out := new(ModSystemSayingResponse)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModSystemSaying", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelSystemSaying(ctx context.Context, in *DelSystemSayingRequest, opts ...grpc.CallOption) (*DelSystemSayingResponse, error) {
	out := new(DelSystemSayingResponse)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelSystemSaying", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) OnOffSystemSaying(ctx context.Context, in *OnOffSystemSayingRequest, opts ...grpc.CallOption) (*OnOffSystemSayingResponse, error) {
	out := new(OnOffSystemSayingResponse)
	err := c.cc.Invoke(ctx, "/manage.Manage/OnOffSystemSaying", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddSkinType(ctx context.Context, in *AddSkinTypeRequest, opts ...grpc.CallOption) (*AddSkinTypeResponse, error) {
	out := new(AddSkinTypeResponse)
	err := c.cc.Invoke(ctx, "/manage.Manage/AddSkinType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ListSkinType(ctx context.Context, in *ListSkinTypeRequest, opts ...grpc.CallOption) (*ListSkinTypeResponse, error) {
	out := new(ListSkinTypeResponse)
	err := c.cc.Invoke(ctx, "/manage.Manage/ListSkinType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) ModSkinType(ctx context.Context, in *ModSkinTypeRequest, opts ...grpc.CallOption) (*ModSkinTypeResponse, error) {
	out := new(ModSkinTypeResponse)
	err := c.cc.Invoke(ctx, "/manage.Manage/ModSkinType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DelSkinType(ctx context.Context, in *DelSkinTypeRequest, opts ...grpc.CallOption) (*DelSkinTypeResponse, error) {
	out := new(DelSkinTypeResponse)
	err := c.cc.Invoke(ctx, "/manage.Manage/DelSkinType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) OnOffSkinType(ctx context.Context, in *OnOffSkinTypeRequest, opts ...grpc.CallOption) (*OnOffSkinTypeResponse, error) {
	out := new(OnOffSkinTypeResponse)
	err := c.cc.Invoke(ctx, "/manage.Manage/OnOffSkinType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SetLoginTokenCache(ctx context.Context, in *SetLoginTokenCacheReq, opts ...grpc.CallOption) (*SetLoginTokenCacheResp, error) {
	out := new(SetLoginTokenCacheResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/SetLoginTokenCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetLoginTokenCache(ctx context.Context, in *GetLoginTokenCacheReq, opts ...grpc.CallOption) (*GetLoginTokenCacheResp, error) {
	out := new(GetLoginTokenCacheResp)
	err := c.cc.Invoke(ctx, "/manage.Manage/GetLoginTokenCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManageServer is the server API for Manage service.
// All implementations must embed UnimplementedManageServer
// for forward compatibility
type ManageServer interface {
	// 首页相关
	Summary(context.Context, *SummaryRequest) (*SummaryResp, error)
	ExportSummary(context.Context, *ExportSummaryRequest) (*ExportSummaryResp, error)
	// 管理员相关
	Login(context.Context, *LoginRequest) (*LoginResp, error)
	ListManager(context.Context, *ListManagerRequest) (*ListManagerResp, error)
	ModPasswd(context.Context, *ModPasswdRequest) (*ModPasswdResp, error)
	ModUserInfo(context.Context, *ModUserInfoRequest) (*ModUserInfoResp, error)
	DelUser(context.Context, *DelUserRequest) (*DelUserResp, error)
	AddUser(context.Context, *AddUserRequest) (*AddUserResp, error)
	ExportUser(context.Context, *ExportUserRequest) (*ExportUserResp, error)
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileResp, error)
	// 角色相关
	AddRoleInfo(context.Context, *AddRoleInfoRequest) (*AddRoleInfoResp, error)
	ModRoleInfo(context.Context, *ModRoleInfoRequest) (*ModRoleInfoResp, error)
	DelRoleInfo(context.Context, *DelRoleInfoRequest) (*DelRoleInfoResp, error)
	ListRole(context.Context, *ListRoleRequest) (*ListRoleResp, error)
	FronzenRole(context.Context, *FrozenRoleRequest) (*FrozenRoleResp, error)
	RecoverRole(context.Context, *RecoverRoleRequest) (*RecoverRoleResp, error)
	// 测肤维度文案
	AddMeasureSkinDimension(context.Context, *AddMeasureSkinDimensionRequest) (*AddMeasureSkinDimensionResp, error)
	ListMeasureSkinDimension(context.Context, *ListMeasureSkinDimensionRequest) (*ListMeasureSkinDimensionResp, error)
	ModMeasureSkinDimension(context.Context, *ModMeasureSkinDimensionRequest) (*ModMeasureSkinDimensionResp, error)
	DelMeasureSkinDimension(context.Context, *DelMeasureSkinDimensionRequest) (*DelMeasureSkinDimensionResp, error)
	// 检测维度设置
	AddMeasureDimensionSetting(context.Context, *AddMeasureDimensionSettingRequest) (*AddMeasureDimensionSettingResp, error)
	ListMeasureDimensionSetting(context.Context, *ListMeasureDimensionSettingRequest) (*ListMeasureDimensionSettingResp, error)
	ModMeasureDimensionSetting(context.Context, *ModMeasureDimensionSettingRequest) (*ModMeasureDimensionSettingResp, error)
	DelMeasureDimensionSetting(context.Context, *DelMeasureDimensionSettingRequest) (*DelMeasureDimensionSettingResp, error)
	// 测肤报告设置
	AddReportSetting(context.Context, *AddReportSettingReq) (*AddReportSettingRsp, error)
	DelReportSetting(context.Context, *DelReportSettingReq) (*DelReportSettingRsp, error)
	ModReportSetting(context.Context, *ModReportSettingReq) (*ModReportSettingRsp, error)
	ListReportSetting(context.Context, *ListReportSettingReq) (*ListReportSettingRsp, error)
	// 产品字典
	AddProductDict(context.Context, *AddProductDictRequest) (*AddProductDictResp, error)
	ListProductDict(context.Context, *ListProductDictRequest) (*ListProductDictResp, error)
	ModProductDict(context.Context, *ModProductDictRequest) (*ModProductDictResp, error)
	DelProductDict(context.Context, *DelProductDictRequest) (*DelProductDictResp, error)
	AddDict(context.Context, *AddDictReq) (*AddDictRsp, error)
	DelDict(context.Context, *DelDictReq) (*DelDictRsp, error)
	ModDict(context.Context, *ModDictReq) (*ModDictRsp, error)
	ListDict(context.Context, *ListDictReq) (*ListDictRsp, error)
	AddTheme(context.Context, *AddThemeReq) (*AddThemeRsp, error)
	DelTheme(context.Context, *DelThemeReq) (*DelThemeRsp, error)
	ModTheme(context.Context, *ModThemeReq) (*ModThemeRsp, error)
	ListTheme(context.Context, *ListThemeReq) (*ListThemeRsp, error)
	// 推送消息
	AddPushMessage(context.Context, *AddPushMessageRequest) (*AddPushMessageResp, error)
	ListPushMessage(context.Context, *ListPushMessageRequest) (*ListPushMessageResp, error)
	ModPushMessage(context.Context, *ModPushMessageRequest) (*ModPushMessageResp, error)
	DelPushMessage(context.Context, *DelPushMessageRequest) (*DelPushMessageResp, error)
	// 意见反馈
	ListIssue(context.Context, *ListIssueRequest) (*ListIssueResp, error)
	ModIssue(context.Context, *ModIssueRequest) (*ModIssueResp, error)
	DelIssue(context.Context, *DelIssueRequest) (*DelIssueResp, error)
	// 美妆镜管理
	ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResp, error)
	AddMachines(context.Context, *AddMachinesRequest) (*AddMachinesResp, error)
	DelMachines(context.Context, *DelMachinesRequest) (*DelMachinesResp, error)
	ModMachines(context.Context, *ModMachinesRequest) (*ModMachinesResp, error)
	// 待机轮播图管理
	ListMachinesIdleRes(context.Context, *ListMachinesIdleResRequest) (*ListMachinesIdleResResp, error)
	AddMachinesIdleRes(context.Context, *AddMachinesIdleResRequest) (*AddMachinesIdleResResp, error)
	DelMachinesIdleRes(context.Context, *DelMachinesIdleResRequest) (*DelMachinesIdleResResp, error)
	ModMachinesIdleRes(context.Context, *ModMachinesIdleResRequest) (*ModMachinesIdleResResp, error)
	// 护肤品管理
	ListSkinCareProduct(context.Context, *ListSkinCareProductRequest) (*ListSkinCareProductResp, error)
	AddSkinCareProduct(context.Context, *AddSkinCareProductRequest) (*AddSkinCareProductResp, error)
	DelSkinCareProduct(context.Context, *DelSkinCareProductRequest) (*DelSkinCareProductResp, error)
	ModSkinCareProduct(context.Context, *ModSkinCareProductRequest) (*ModSkinCareProductResp, error)
	UpSkinCareProduct(context.Context, *UpSkinCareProductRequest) (*UpSkinCareProductResp, error)
	DownSkinCareProduct(context.Context, *DownSkinCareProductRequest) (*DownSkinCareProductResp, error)
	// 推荐管理
	BatchSyncRecommendProduct(context.Context, *BatchSyncRecommendProductReq) (*BatchSyncRecommendProductRsp, error)
	BatchSyncRecommendProject(context.Context, *BatchSyncRecommendProjectReq) (*BatchSyncRecommendProjectRsp, error)
	AddSkinCareProject(context.Context, *AddSkinCareProjectReq) (*AddSkinCareProjectRsp, error)
	DelSkinCareProject(context.Context, *DelSkinCareProjectReq) (*DelSkinCareProjectRsp, error)
	ModSkinCareProject(context.Context, *ModSkinCareProjectReq) (*ModSkinCareProjectRsp, error)
	ListSkinCareProject(context.Context, *ListSkinCareProjectReq) (*ListSkinCareProjectRsp, error)
	OnOffSkinCareProject(context.Context, *OnOffSkinCareProjectReq) (*OnOffSkinCareProjectRsp, error)
	// 彩妆管理
	ListCosmeticsProduct(context.Context, *ListCosmeticsProductRequest) (*ListCosmeticsProductResp, error)
	AddCosmeticsProduct(context.Context, *AddCosmeticsProductRequest) (*AddCosmeticsProductResp, error)
	DelCosmeticsProduct(context.Context, *DelCosmeticsProductRequest) (*DelCosmeticsProductResp, error)
	ModCosmeticsProduct(context.Context, *ModCosmeticsProductRequest) (*ModCosmeticsProductResp, error)
	UpCosmeticsProduct(context.Context, *UpCosmeticsProductRequest) (*UpCosmeticsProductResp, error)
	DownCosmeticsProduct(context.Context, *DownCosmeticsProductRequest) (*DownCosmeticsProductResp, error)
	// 化妆教程管理
	ListMichellPhan(context.Context, *ListMichellPhanRequest) (*ListMichellPhanResp, error)
	AddMichellPhan(context.Context, *AddMichellPhanRequest) (*AddMichellPhanResp, error)
	DelMichellPhan(context.Context, *DelMichellPhanRequest) (*DelMichellPhanResp, error)
	ModMichellPhan(context.Context, *ModMichellPhanRequest) (*ModMichellPhanResp, error)
	// 护肤建议管理
	ListSkinCareAdvice(context.Context, *ListSkinCareAdviceRequest) (*ListSkinCareAdviceResp, error)
	AddSkinCareAdvice(context.Context, *AddSkinCareAdviceRequest) (*AddSkinCareAdviceResp, error)
	DelSkinCareAdvice(context.Context, *DelSkinCareAdviceRequest) (*DelSkinCareAdviceResp, error)
	ModSkinCareAdvice(context.Context, *ModSkinCareAdviceRequest) (*ModSkinCareAdviceResp, error)
	UpSkinCareAdvice(context.Context, *UpSkinCareAdviceRequest) (*UpSkinCareAdviceResp, error)
	DownSkinCareAdvice(context.Context, *DownSkinCareAdviceRequest) (*DownSkinCareAdviceResp, error)
	// 测肤记录管理
	ListMeasureSkinRecord(context.Context, *ListMeasureSkinRecordRequest) (*ListMeasureSkinRecordResp, error)
	GetMeasureSkinDetail(context.Context, *GetMeasureSkinDetailRequest) (*GetMeasureSkinDetailResp, error)
	DelMeasureSkinRecord(context.Context, *DelMeasureSkinRecordRequest) (*DelMeasureSkinRecordResp, error)
	// 产品推荐权重设置管理
	ListProductRecommendationWeightSetting(context.Context, *ListProductRecommendationWeightSettingRequest) (*ListProductRecommendationWeightSettingResp, error)
	AddProductRecommendationWeightSetting(context.Context, *AddProductRecommendationWeightSettingRequest) (*AddProductRecommendationWeightSettingResp, error)
	DelProductRecommendationWeightSetting(context.Context, *DelProductRecommendationWeightSettingRequest) (*DelProductRecommendationWeightSettingResp, error)
	ModProductRecommendationWeightSetting(context.Context, *ModProductRecommendationWeightSettingRequest) (*ModProductRecommendationWeightSettingResp, error)
	// 设备用户相关
	ListDeviceUser(context.Context, *ListDeviceUserRequest) (*ListDeviceUserResp, error)
	FrozenDeviceUser(context.Context, *FrozenDeviceUserRequest) (*FrozenDeviceUserResp, error)
	RecoverDeviceUser(context.Context, *RecoverDeviceUserRequest) (*RecoverDeviceUserResp, error)
	// 教程分类相关
	AddCourseClassInfo(context.Context, *AddCourseClassInfoRequest) (*AddCourseClassInfoResp, error)
	ModCourseClassInfo(context.Context, *ModCourseClassInfoRequest) (*ModCourseClassInfoResp, error)
	DelCourseClassInfo(context.Context, *DelCourseClassInfoRequest) (*DelCourseClassInfoResp, error)
	ListCourseClass(context.Context, *ListCourseClassRequest) (*ListCourseClassResp, error)
	GetCourseClassNameList(context.Context, *GetCourseClassNameListRequest) (*GetCourseClassNameListResp, error)
	UpCourseClass(context.Context, *UpCourseClassRequest) (*UpCourseClassResp, error)
	DownCourseClass(context.Context, *DownCourseClassRequest) (*DownCourseClassResp, error)
	GetYouZanOnSaleList(context.Context, *GetYouZanOnSaleListRequest) (*GetYouZanOnSaleListResp, error)
	GetYouZanItemDetail(context.Context, *GetYouZanItemDetailRequest) (*GetYouZanItemDetailResp, error)
	// 达人相关
	AddWiseManInfo(context.Context, *AddWiseManInfoRequest) (*AddWiseManInfoResp, error)
	ModWiseManInfo(context.Context, *ModWiseManInfoRequest) (*ModWiseManInfoResp, error)
	DelWiseManInfo(context.Context, *DelWiseManInfoRequest) (*DelWiseManInfoResp, error)
	ListWiseMan(context.Context, *ListWiseManRequest) (*ListWiseManResp, error)
	GetWiseManNameList(context.Context, *GetWiseManNameListRequest) (*GetWiseManNameListResp, error)
	UpWiseMan(context.Context, *UpWiseManRequest) (*UpWiseManResp, error)
	DownWiseMan(context.Context, *DownWiseManRequest) (*DownWiseManResp, error)
	// 教程相关
	AddCourseInfo(context.Context, *AddCourseInfoRequest) (*AddCourseInfoResp, error)
	ModCourseInfo(context.Context, *ModCourseInfoRequest) (*ModCourseInfoResp, error)
	DelCourseInfo(context.Context, *DelCourseInfoRequest) (*DelCourseInfoResp, error)
	ListCourse(context.Context, *ListCourseRequest) (*ListCourseResp, error)
	ListCanRecommendCourseName(context.Context, *ListCanRecommendCourseNameRequest) (*ListCanRecommendCourseNameResp, error)
	ListCourseStepAndProduct(context.Context, *ListCourseStepAndProductRequest) (*ListCourseStepAndProductResp, error)
	UpCourse(context.Context, *UpCourseRequest) (*UpCourseResp, error)
	DownCourse(context.Context, *DownCourseRequest) (*DownCourseResp, error)
	// 推荐教程相关
	AddCourseRecommendInfo(context.Context, *AddCourseRecommendInfoRequest) (*AddCourseRecommendInfoResp, error)
	ModCourseRecommendInfo(context.Context, *ModCourseRecommendInfoRequest) (*ModCourseRecommendInfoResp, error)
	DelCourseRecommendInfo(context.Context, *DelCourseRecommendInfoRequest) (*DelCourseRecommendInfoResp, error)
	ListCourseRecommend(context.Context, *ListCourseRecommendRequest) (*ListCourseRecommendResp, error)
	UpCourseRecommend(context.Context, *UpCourseRecommendRequest) (*UpCourseRecommendResp, error)
	DownCourseRecommend(context.Context, *DownCourseRecommendRequest) (*DownCourseRecommendResp, error)
	// 医生相关
	AddDoctorInfo(context.Context, *AddDoctorInfoRequest) (*AddDoctorInfoResp, error)
	ModDoctorInfo(context.Context, *ModDoctorInfoRequest) (*ModDoctorInfoResp, error)
	DelDoctorInfo(context.Context, *DelDoctorInfoRequest) (*DelDoctorInfoResp, error)
	ListDoctor(context.Context, *ListDoctorRequest) (*ListDoctorResp, error)
	UpDoctor(context.Context, *UpDoctorRequest) (*UpDoctorResp, error)
	DownDoctor(context.Context, *DownDoctorRequest) (*DownDoctorResp, error)
	// 操作记录
	AddOperationLog(context.Context, *AddOperationLogRequest) (*AddOperationLogResp, error)
	ListOperationLog(context.Context, *ListOperationLogRequest) (*ListOperationLogResp, error)
	// 查询导入任务
	ListImportTask(context.Context, *ListImportTaskRequest) (*ListImportTaskResp, error)
	AddImportTask(context.Context, *AddImportTaskRequest) (*AddImportTaskResp, error)
	// 查询数据埋点列表
	ListDataPoint(context.Context, *ListDataPointRequest) (*ListDataPointResp, error)
	// 版本管理相关
	AddDeviceVersionInfo(context.Context, *AddDeviceVersionRequest) (*AddDeviceVersionResp, error)
	ModDeviceVersionInfo(context.Context, *ModDeviceVersionRequest) (*ModDeviceVersionResp, error)
	DelDeviceVersionInfo(context.Context, *DelDeviceVersionRequest) (*DelDeviceVersionResp, error)
	ListDeviceVersion(context.Context, *ListDeviceVersionRequest) (*ListDeviceVersionResp, error)
	ListCheckPasswordList(context.Context, *GetCheckPasswordListRequest) (*GetCheckPasswordListResp, error)
	SetCheckPasswordTimer(context.Context, *SetCheckPasswordTimerRequest) (*SetCheckPasswordTimerResp, error)
	ListWhiteList(context.Context, *GetListWhiteListRequest) (*GetListWhiteListResp, error)
	AddWhiteList(context.Context, *AddListWhiteListRequest) (*AddListWhiteListResp, error)
	DelWhiteList(context.Context, *DelListWhiteListRequest) (*DelListWhiteListResp, error)
	SyncWhiteList(context.Context, *SyncWhiteListRequest) (*SyncWhiteListResp, error)
	ListAppConfig(context.Context, *ListAppConfigRequest) (*ListAppConfigResp, error)
	AddAppConfig(context.Context, *AddAppConfigRequest) (*AddAppConfigResp, error)
	DelAppConfig(context.Context, *DelAppConfigRequest) (*DelAppConfigResp, error)
	ModAppConfig(context.Context, *ModAppConfigRequest) (*ModAppConfigResp, error)
	SyncAppConfig(context.Context, *SyncAppConfigRequest) (*SyncAppConfigResp, error)
	// 权限系统
	// 商家
	ListBusiness(context.Context, *ListBusinessRequest) (*ListBusinessResp, error)
	CreateBusiness(context.Context, *CreateBusinessRequest) (*CreateBusinessResp, error)
	AddBusiness(context.Context, *AddBusinessRequest) (*AddBusinessResp, error)
	ModBusiness(context.Context, *ModBusinessRequest) (*ModBusinessResp, error)
	DelBusiness(context.Context, *DelBusinessRequest) (*DelBusinessResp, error)
	// 门店
	ListShopInfo(context.Context, *ListShopInfoRequest) (*ListShopInfoResp, error)
	AddShopInfo(context.Context, *AddShopInfoRequest) (*AddShopInfoResp, error)
	ModShopInfo(context.Context, *ModShopInfoRequest) (*ModShopInfoResp, error)
	DelShopInfo(context.Context, *DelShopInfoRequest) (*DelShopInfoResp, error)
	// 权限
	ListPermission(context.Context, *ListPermissionRequest) (*ListPermissionResp, error)
	AddPermission(context.Context, *AddPermissionRequest) (*AddPermissionResp, error)
	ModPermission(context.Context, *ModPermissionRequest) (*ModPermissionResp, error)
	DelPermission(context.Context, *DelPermissionRequest) (*DelPermissionResp, error)
	GetListPermissionByRoleId(context.Context, *ListPermissionByRoleIdRequest) (*ListPermissionByRoleIdResp, error)
	GetListPermissionByManageId(context.Context, *ListPermissionByManageIdRequest) (*ListPermissionByManageIdResp, error)
	// 用户角色关系表
	ListManagerRoleRelation(context.Context, *ListManagerRoleRelationRequest) (*ListManagerRoleRelationResp, error)
	AddManagerRoleRelation(context.Context, *AddManagerRoleRelationRequest) (*AddManagerRoleRelationResp, error)
	ModManagerRoleRelation(context.Context, *ModManagerRoleRelationRequest) (*ModManagerRoleRelationResp, error)
	DelManagerRoleRelation(context.Context, *DelManagerRoleRelationRequest) (*DelManagerRoleRelationResp, error)
	ListManagerRoleRelationByManageId(context.Context, *ListManagerRoleRelationByManageIdRequest) (*ListManagerRoleRelationByManageIdResp, error)
	DelManagerRoleRelationByManageId(context.Context, *DelManagerRoleRelationByManageIdRequest) (*DelManagerRoleRelationByManageIdResp, error)
	AddManagerRoleRelationByManageId(context.Context, *AddManagerRoleRelationByManageIdRequest) (*AddManagerRoleRelationByManageIdResp, error)
	// 角色权限关系表
	ListRolePermissionRelation(context.Context, *ListRolePermissionRelationRequest) (*ListRolePermissionRelationResp, error)
	AddRolePermissionRelation(context.Context, *AddRolePermissionRelationRequest) (*AddRolePermissionRelationResp, error)
	ModRolePermissionRelation(context.Context, *ModRolePermissionRelationRequest) (*ModRolePermissionRelationResp, error)
	DelRolePermissionRelation(context.Context, *DelRolePermissionRelationRequest) (*DelRolePermissionRelationResp, error)
	// 发送验证码
	GetSmsCode(context.Context, *GetSmsCodeRequest) (*GetSmsCodeResp, error)
	// 短信验证码登录
	LoginWithSmsCode(context.Context, *LoginWithSmsCodeRequest) (*LoginWithSmsCodeResp, error)
	GetSmsCodeByCreateBusiness(context.Context, *GetSmsCodeByCreateBusinessRequest) (*GetSmsCodeByCreateBusinessResp, error)
	GetBusinessById(context.Context, *GetBusinessByIdRequest) (*GetBusinessByIdResp, error)
	GetPreAuthCode(context.Context, *GetPreAuthCodeReq) (*GetPreAuthCodeResp, error)
	// 接收每10分钟的请求数据
	AuthorizationEventReceptionConfig(context.Context, *AuthorizationEventReceptionConfigReq) (*AuthorizationEventReceptionConfigResp, error)
	GetAuthorizerAccessToken(context.Context, *GetAuthorizerAccessTokenReq) (*GetAuthorizerAccessTokenResp, error)
	GetAuthorizerInfo(context.Context, *GetAuthorizerInfoReq) (*GetAuthorizerInfoResp, error)
	ApiQueryAuth(context.Context, *ApiQueryAuthReq) (*ApiQueryAuthResp, error)
	GetWechatOfficialAccountPlatform(context.Context, *GetWechatOfficialAccountPlatformReq) (*GetWechatOfficialAccountPlatformResp, error)
	AddWechatOfficialAccountPlatform(context.Context, *AddWechatOfficialAccountPlatformReq) (*AddWechatOfficialAccountPlatformResp, error)
	ModWechatOfficialAccountPlatform(context.Context, *ModWechatOfficialAccountPlatformReq) (*ModWechatOfficialAccountPlatformResp, error)
	SimpleModUserInfo(context.Context, *SimpleModUserInfoReq) (*SimpleModUserInfoResp, error)
	GetRoleInfoByShopId(context.Context, *GetRoleInfoByShopIdReq) (*GetRoleInfoByShopIdResp, error)
	ListSystemEnum(context.Context, *ListSystemEnumRequest) (*ListSystemEnumResp, error)
	ListScoreSetting(context.Context, *ListScoreSettingRequest) (*ListScoreSettingResp, error)
	AddScoreSetting(context.Context, *AddScoreSettingRequest) (*AddScoreSettingResp, error)
	ModScoreSetting(context.Context, *ModScoreSettingRequest) (*ModScoreSettingResp, error)
	DelScoreSetting(context.Context, *DelScoreSettingRequest) (*DelScoreSettingResp, error)
	AddWeiXinFans(context.Context, *AddWeiXinFansRequest) (*AddWeiXinFansResp, error)
	DelWeiXinFans(context.Context, *DelWeiXinFansRequest) (*DelWeiXinFansResp, error)
	GetAuthorizerAccessTokenByAppId(context.Context, *GetAuthorizerAccessTokenByAppIdRequest) (*GetAuthorizerAccessTokenByAppIdResp, error)
	SCAN(context.Context, *SCANRequest) (*SCANResp, error)
	// 套餐管理
	AddPackages(context.Context, *AddPackagesReq) (*AddPackagesRsp, error)
	ListPackages(context.Context, *ListPackagesReq) (*ListPackagesRsp, error)
	ModPackages(context.Context, *ModPackagesReq) (*ModPackagesRsp, error)
	DelPackages(context.Context, *DelPackagesReq) (*DelPackagesRsp, error)
	ListOrder(context.Context, *ListOrderReq) (*ListOrderRsp, error)
	SCANByRecordId(context.Context, *SCANByRecordIdRequest) (*SCANByRecordIdResp, error)
	// 获取oss信息
	GetOSSInfo(context.Context, *GetOssInfoRequest) (*GetOssInfoResp, error)
	ExportDeviceUser(context.Context, *ExportDeviceUserRequest) (*ExportDeviceUserResp, error)
	ExportMeasureSkinRecord(context.Context, *ExportExportMeasureSkinRecordRequest) (*ExportExportMeasureSkinRecordResp, error)
	// 推荐文案管理
	AddSystemSaying(context.Context, *AddSystemSayingRequest) (*AddSystemSayingResponse, error)
	ListSystemSaying(context.Context, *ListSystemSayingRequest) (*ListSystemSayingResponse, error)
	ModSystemSaying(context.Context, *ModSystemSayingRequest) (*ModSystemSayingResponse, error)
	DelSystemSaying(context.Context, *DelSystemSayingRequest) (*DelSystemSayingResponse, error)
	OnOffSystemSaying(context.Context, *OnOffSystemSayingRequest) (*OnOffSystemSayingResponse, error)
	// 推荐文案管理
	AddSkinType(context.Context, *AddSkinTypeRequest) (*AddSkinTypeResponse, error)
	ListSkinType(context.Context, *ListSkinTypeRequest) (*ListSkinTypeResponse, error)
	ModSkinType(context.Context, *ModSkinTypeRequest) (*ModSkinTypeResponse, error)
	DelSkinType(context.Context, *DelSkinTypeRequest) (*DelSkinTypeResponse, error)
	OnOffSkinType(context.Context, *OnOffSkinTypeRequest) (*OnOffSkinTypeResponse, error)
	// 设置登录token信息
	SetLoginTokenCache(context.Context, *SetLoginTokenCacheReq) (*SetLoginTokenCacheResp, error)
	// 获取登录token信息
	GetLoginTokenCache(context.Context, *GetLoginTokenCacheReq) (*GetLoginTokenCacheResp, error)
	mustEmbedUnimplementedManageServer()
}

// UnimplementedManageServer must be embedded to have forward compatible implementations.
type UnimplementedManageServer struct {
}

func (UnimplementedManageServer) Summary(context.Context, *SummaryRequest) (*SummaryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Summary not implemented")
}
func (UnimplementedManageServer) ExportSummary(context.Context, *ExportSummaryRequest) (*ExportSummaryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportSummary not implemented")
}
func (UnimplementedManageServer) Login(context.Context, *LoginRequest) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedManageServer) ListManager(context.Context, *ListManagerRequest) (*ListManagerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListManager not implemented")
}
func (UnimplementedManageServer) ModPasswd(context.Context, *ModPasswdRequest) (*ModPasswdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModPasswd not implemented")
}
func (UnimplementedManageServer) ModUserInfo(context.Context, *ModUserInfoRequest) (*ModUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModUserInfo not implemented")
}
func (UnimplementedManageServer) DelUser(context.Context, *DelUserRequest) (*DelUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUser not implemented")
}
func (UnimplementedManageServer) AddUser(context.Context, *AddUserRequest) (*AddUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedManageServer) ExportUser(context.Context, *ExportUserRequest) (*ExportUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportUser not implemented")
}
func (UnimplementedManageServer) UploadFile(context.Context, *UploadFileRequest) (*UploadFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedManageServer) AddRoleInfo(context.Context, *AddRoleInfoRequest) (*AddRoleInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleInfo not implemented")
}
func (UnimplementedManageServer) ModRoleInfo(context.Context, *ModRoleInfoRequest) (*ModRoleInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModRoleInfo not implemented")
}
func (UnimplementedManageServer) DelRoleInfo(context.Context, *DelRoleInfoRequest) (*DelRoleInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRoleInfo not implemented")
}
func (UnimplementedManageServer) ListRole(context.Context, *ListRoleRequest) (*ListRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRole not implemented")
}
func (UnimplementedManageServer) FronzenRole(context.Context, *FrozenRoleRequest) (*FrozenRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FronzenRole not implemented")
}
func (UnimplementedManageServer) RecoverRole(context.Context, *RecoverRoleRequest) (*RecoverRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverRole not implemented")
}
func (UnimplementedManageServer) AddMeasureSkinDimension(context.Context, *AddMeasureSkinDimensionRequest) (*AddMeasureSkinDimensionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMeasureSkinDimension not implemented")
}
func (UnimplementedManageServer) ListMeasureSkinDimension(context.Context, *ListMeasureSkinDimensionRequest) (*ListMeasureSkinDimensionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMeasureSkinDimension not implemented")
}
func (UnimplementedManageServer) ModMeasureSkinDimension(context.Context, *ModMeasureSkinDimensionRequest) (*ModMeasureSkinDimensionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModMeasureSkinDimension not implemented")
}
func (UnimplementedManageServer) DelMeasureSkinDimension(context.Context, *DelMeasureSkinDimensionRequest) (*DelMeasureSkinDimensionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMeasureSkinDimension not implemented")
}
func (UnimplementedManageServer) AddMeasureDimensionSetting(context.Context, *AddMeasureDimensionSettingRequest) (*AddMeasureDimensionSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMeasureDimensionSetting not implemented")
}
func (UnimplementedManageServer) ListMeasureDimensionSetting(context.Context, *ListMeasureDimensionSettingRequest) (*ListMeasureDimensionSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMeasureDimensionSetting not implemented")
}
func (UnimplementedManageServer) ModMeasureDimensionSetting(context.Context, *ModMeasureDimensionSettingRequest) (*ModMeasureDimensionSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModMeasureDimensionSetting not implemented")
}
func (UnimplementedManageServer) DelMeasureDimensionSetting(context.Context, *DelMeasureDimensionSettingRequest) (*DelMeasureDimensionSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMeasureDimensionSetting not implemented")
}
func (UnimplementedManageServer) AddReportSetting(context.Context, *AddReportSettingReq) (*AddReportSettingRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReportSetting not implemented")
}
func (UnimplementedManageServer) DelReportSetting(context.Context, *DelReportSettingReq) (*DelReportSettingRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelReportSetting not implemented")
}
func (UnimplementedManageServer) ModReportSetting(context.Context, *ModReportSettingReq) (*ModReportSettingRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModReportSetting not implemented")
}
func (UnimplementedManageServer) ListReportSetting(context.Context, *ListReportSettingReq) (*ListReportSettingRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReportSetting not implemented")
}
func (UnimplementedManageServer) AddProductDict(context.Context, *AddProductDictRequest) (*AddProductDictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductDict not implemented")
}
func (UnimplementedManageServer) ListProductDict(context.Context, *ListProductDictRequest) (*ListProductDictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductDict not implemented")
}
func (UnimplementedManageServer) ModProductDict(context.Context, *ModProductDictRequest) (*ModProductDictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModProductDict not implemented")
}
func (UnimplementedManageServer) DelProductDict(context.Context, *DelProductDictRequest) (*DelProductDictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelProductDict not implemented")
}
func (UnimplementedManageServer) AddDict(context.Context, *AddDictReq) (*AddDictRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDict not implemented")
}
func (UnimplementedManageServer) DelDict(context.Context, *DelDictReq) (*DelDictRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDict not implemented")
}
func (UnimplementedManageServer) ModDict(context.Context, *ModDictReq) (*ModDictRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModDict not implemented")
}
func (UnimplementedManageServer) ListDict(context.Context, *ListDictReq) (*ListDictRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDict not implemented")
}
func (UnimplementedManageServer) AddTheme(context.Context, *AddThemeReq) (*AddThemeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTheme not implemented")
}
func (UnimplementedManageServer) DelTheme(context.Context, *DelThemeReq) (*DelThemeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTheme not implemented")
}
func (UnimplementedManageServer) ModTheme(context.Context, *ModThemeReq) (*ModThemeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModTheme not implemented")
}
func (UnimplementedManageServer) ListTheme(context.Context, *ListThemeReq) (*ListThemeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTheme not implemented")
}
func (UnimplementedManageServer) AddPushMessage(context.Context, *AddPushMessageRequest) (*AddPushMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPushMessage not implemented")
}
func (UnimplementedManageServer) ListPushMessage(context.Context, *ListPushMessageRequest) (*ListPushMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPushMessage not implemented")
}
func (UnimplementedManageServer) ModPushMessage(context.Context, *ModPushMessageRequest) (*ModPushMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModPushMessage not implemented")
}
func (UnimplementedManageServer) DelPushMessage(context.Context, *DelPushMessageRequest) (*DelPushMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPushMessage not implemented")
}
func (UnimplementedManageServer) ListIssue(context.Context, *ListIssueRequest) (*ListIssueResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIssue not implemented")
}
func (UnimplementedManageServer) ModIssue(context.Context, *ModIssueRequest) (*ModIssueResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModIssue not implemented")
}
func (UnimplementedManageServer) DelIssue(context.Context, *DelIssueRequest) (*DelIssueResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelIssue not implemented")
}
func (UnimplementedManageServer) ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachines not implemented")
}
func (UnimplementedManageServer) AddMachines(context.Context, *AddMachinesRequest) (*AddMachinesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMachines not implemented")
}
func (UnimplementedManageServer) DelMachines(context.Context, *DelMachinesRequest) (*DelMachinesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMachines not implemented")
}
func (UnimplementedManageServer) ModMachines(context.Context, *ModMachinesRequest) (*ModMachinesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModMachines not implemented")
}
func (UnimplementedManageServer) ListMachinesIdleRes(context.Context, *ListMachinesIdleResRequest) (*ListMachinesIdleResResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachinesIdleRes not implemented")
}
func (UnimplementedManageServer) AddMachinesIdleRes(context.Context, *AddMachinesIdleResRequest) (*AddMachinesIdleResResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMachinesIdleRes not implemented")
}
func (UnimplementedManageServer) DelMachinesIdleRes(context.Context, *DelMachinesIdleResRequest) (*DelMachinesIdleResResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMachinesIdleRes not implemented")
}
func (UnimplementedManageServer) ModMachinesIdleRes(context.Context, *ModMachinesIdleResRequest) (*ModMachinesIdleResResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModMachinesIdleRes not implemented")
}
func (UnimplementedManageServer) ListSkinCareProduct(context.Context, *ListSkinCareProductRequest) (*ListSkinCareProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSkinCareProduct not implemented")
}
func (UnimplementedManageServer) AddSkinCareProduct(context.Context, *AddSkinCareProductRequest) (*AddSkinCareProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSkinCareProduct not implemented")
}
func (UnimplementedManageServer) DelSkinCareProduct(context.Context, *DelSkinCareProductRequest) (*DelSkinCareProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSkinCareProduct not implemented")
}
func (UnimplementedManageServer) ModSkinCareProduct(context.Context, *ModSkinCareProductRequest) (*ModSkinCareProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModSkinCareProduct not implemented")
}
func (UnimplementedManageServer) UpSkinCareProduct(context.Context, *UpSkinCareProductRequest) (*UpSkinCareProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpSkinCareProduct not implemented")
}
func (UnimplementedManageServer) DownSkinCareProduct(context.Context, *DownSkinCareProductRequest) (*DownSkinCareProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownSkinCareProduct not implemented")
}
func (UnimplementedManageServer) BatchSyncRecommendProduct(context.Context, *BatchSyncRecommendProductReq) (*BatchSyncRecommendProductRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSyncRecommendProduct not implemented")
}
func (UnimplementedManageServer) BatchSyncRecommendProject(context.Context, *BatchSyncRecommendProjectReq) (*BatchSyncRecommendProjectRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSyncRecommendProject not implemented")
}
func (UnimplementedManageServer) AddSkinCareProject(context.Context, *AddSkinCareProjectReq) (*AddSkinCareProjectRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSkinCareProject not implemented")
}
func (UnimplementedManageServer) DelSkinCareProject(context.Context, *DelSkinCareProjectReq) (*DelSkinCareProjectRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSkinCareProject not implemented")
}
func (UnimplementedManageServer) ModSkinCareProject(context.Context, *ModSkinCareProjectReq) (*ModSkinCareProjectRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModSkinCareProject not implemented")
}
func (UnimplementedManageServer) ListSkinCareProject(context.Context, *ListSkinCareProjectReq) (*ListSkinCareProjectRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSkinCareProject not implemented")
}
func (UnimplementedManageServer) OnOffSkinCareProject(context.Context, *OnOffSkinCareProjectReq) (*OnOffSkinCareProjectRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnOffSkinCareProject not implemented")
}
func (UnimplementedManageServer) ListCosmeticsProduct(context.Context, *ListCosmeticsProductRequest) (*ListCosmeticsProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCosmeticsProduct not implemented")
}
func (UnimplementedManageServer) AddCosmeticsProduct(context.Context, *AddCosmeticsProductRequest) (*AddCosmeticsProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCosmeticsProduct not implemented")
}
func (UnimplementedManageServer) DelCosmeticsProduct(context.Context, *DelCosmeticsProductRequest) (*DelCosmeticsProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCosmeticsProduct not implemented")
}
func (UnimplementedManageServer) ModCosmeticsProduct(context.Context, *ModCosmeticsProductRequest) (*ModCosmeticsProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModCosmeticsProduct not implemented")
}
func (UnimplementedManageServer) UpCosmeticsProduct(context.Context, *UpCosmeticsProductRequest) (*UpCosmeticsProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpCosmeticsProduct not implemented")
}
func (UnimplementedManageServer) DownCosmeticsProduct(context.Context, *DownCosmeticsProductRequest) (*DownCosmeticsProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownCosmeticsProduct not implemented")
}
func (UnimplementedManageServer) ListMichellPhan(context.Context, *ListMichellPhanRequest) (*ListMichellPhanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMichellPhan not implemented")
}
func (UnimplementedManageServer) AddMichellPhan(context.Context, *AddMichellPhanRequest) (*AddMichellPhanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMichellPhan not implemented")
}
func (UnimplementedManageServer) DelMichellPhan(context.Context, *DelMichellPhanRequest) (*DelMichellPhanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMichellPhan not implemented")
}
func (UnimplementedManageServer) ModMichellPhan(context.Context, *ModMichellPhanRequest) (*ModMichellPhanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModMichellPhan not implemented")
}
func (UnimplementedManageServer) ListSkinCareAdvice(context.Context, *ListSkinCareAdviceRequest) (*ListSkinCareAdviceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSkinCareAdvice not implemented")
}
func (UnimplementedManageServer) AddSkinCareAdvice(context.Context, *AddSkinCareAdviceRequest) (*AddSkinCareAdviceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSkinCareAdvice not implemented")
}
func (UnimplementedManageServer) DelSkinCareAdvice(context.Context, *DelSkinCareAdviceRequest) (*DelSkinCareAdviceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSkinCareAdvice not implemented")
}
func (UnimplementedManageServer) ModSkinCareAdvice(context.Context, *ModSkinCareAdviceRequest) (*ModSkinCareAdviceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModSkinCareAdvice not implemented")
}
func (UnimplementedManageServer) UpSkinCareAdvice(context.Context, *UpSkinCareAdviceRequest) (*UpSkinCareAdviceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpSkinCareAdvice not implemented")
}
func (UnimplementedManageServer) DownSkinCareAdvice(context.Context, *DownSkinCareAdviceRequest) (*DownSkinCareAdviceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownSkinCareAdvice not implemented")
}
func (UnimplementedManageServer) ListMeasureSkinRecord(context.Context, *ListMeasureSkinRecordRequest) (*ListMeasureSkinRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMeasureSkinRecord not implemented")
}
func (UnimplementedManageServer) GetMeasureSkinDetail(context.Context, *GetMeasureSkinDetailRequest) (*GetMeasureSkinDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeasureSkinDetail not implemented")
}
func (UnimplementedManageServer) DelMeasureSkinRecord(context.Context, *DelMeasureSkinRecordRequest) (*DelMeasureSkinRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMeasureSkinRecord not implemented")
}
func (UnimplementedManageServer) ListProductRecommendationWeightSetting(context.Context, *ListProductRecommendationWeightSettingRequest) (*ListProductRecommendationWeightSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductRecommendationWeightSetting not implemented")
}
func (UnimplementedManageServer) AddProductRecommendationWeightSetting(context.Context, *AddProductRecommendationWeightSettingRequest) (*AddProductRecommendationWeightSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductRecommendationWeightSetting not implemented")
}
func (UnimplementedManageServer) DelProductRecommendationWeightSetting(context.Context, *DelProductRecommendationWeightSettingRequest) (*DelProductRecommendationWeightSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelProductRecommendationWeightSetting not implemented")
}
func (UnimplementedManageServer) ModProductRecommendationWeightSetting(context.Context, *ModProductRecommendationWeightSettingRequest) (*ModProductRecommendationWeightSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModProductRecommendationWeightSetting not implemented")
}
func (UnimplementedManageServer) ListDeviceUser(context.Context, *ListDeviceUserRequest) (*ListDeviceUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceUser not implemented")
}
func (UnimplementedManageServer) FrozenDeviceUser(context.Context, *FrozenDeviceUserRequest) (*FrozenDeviceUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrozenDeviceUser not implemented")
}
func (UnimplementedManageServer) RecoverDeviceUser(context.Context, *RecoverDeviceUserRequest) (*RecoverDeviceUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverDeviceUser not implemented")
}
func (UnimplementedManageServer) AddCourseClassInfo(context.Context, *AddCourseClassInfoRequest) (*AddCourseClassInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCourseClassInfo not implemented")
}
func (UnimplementedManageServer) ModCourseClassInfo(context.Context, *ModCourseClassInfoRequest) (*ModCourseClassInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModCourseClassInfo not implemented")
}
func (UnimplementedManageServer) DelCourseClassInfo(context.Context, *DelCourseClassInfoRequest) (*DelCourseClassInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCourseClassInfo not implemented")
}
func (UnimplementedManageServer) ListCourseClass(context.Context, *ListCourseClassRequest) (*ListCourseClassResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCourseClass not implemented")
}
func (UnimplementedManageServer) GetCourseClassNameList(context.Context, *GetCourseClassNameListRequest) (*GetCourseClassNameListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseClassNameList not implemented")
}
func (UnimplementedManageServer) UpCourseClass(context.Context, *UpCourseClassRequest) (*UpCourseClassResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpCourseClass not implemented")
}
func (UnimplementedManageServer) DownCourseClass(context.Context, *DownCourseClassRequest) (*DownCourseClassResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownCourseClass not implemented")
}
func (UnimplementedManageServer) GetYouZanOnSaleList(context.Context, *GetYouZanOnSaleListRequest) (*GetYouZanOnSaleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetYouZanOnSaleList not implemented")
}
func (UnimplementedManageServer) GetYouZanItemDetail(context.Context, *GetYouZanItemDetailRequest) (*GetYouZanItemDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetYouZanItemDetail not implemented")
}
func (UnimplementedManageServer) AddWiseManInfo(context.Context, *AddWiseManInfoRequest) (*AddWiseManInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWiseManInfo not implemented")
}
func (UnimplementedManageServer) ModWiseManInfo(context.Context, *ModWiseManInfoRequest) (*ModWiseManInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModWiseManInfo not implemented")
}
func (UnimplementedManageServer) DelWiseManInfo(context.Context, *DelWiseManInfoRequest) (*DelWiseManInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelWiseManInfo not implemented")
}
func (UnimplementedManageServer) ListWiseMan(context.Context, *ListWiseManRequest) (*ListWiseManResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWiseMan not implemented")
}
func (UnimplementedManageServer) GetWiseManNameList(context.Context, *GetWiseManNameListRequest) (*GetWiseManNameListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWiseManNameList not implemented")
}
func (UnimplementedManageServer) UpWiseMan(context.Context, *UpWiseManRequest) (*UpWiseManResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpWiseMan not implemented")
}
func (UnimplementedManageServer) DownWiseMan(context.Context, *DownWiseManRequest) (*DownWiseManResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownWiseMan not implemented")
}
func (UnimplementedManageServer) AddCourseInfo(context.Context, *AddCourseInfoRequest) (*AddCourseInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCourseInfo not implemented")
}
func (UnimplementedManageServer) ModCourseInfo(context.Context, *ModCourseInfoRequest) (*ModCourseInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModCourseInfo not implemented")
}
func (UnimplementedManageServer) DelCourseInfo(context.Context, *DelCourseInfoRequest) (*DelCourseInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCourseInfo not implemented")
}
func (UnimplementedManageServer) ListCourse(context.Context, *ListCourseRequest) (*ListCourseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCourse not implemented")
}
func (UnimplementedManageServer) ListCanRecommendCourseName(context.Context, *ListCanRecommendCourseNameRequest) (*ListCanRecommendCourseNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCanRecommendCourseName not implemented")
}
func (UnimplementedManageServer) ListCourseStepAndProduct(context.Context, *ListCourseStepAndProductRequest) (*ListCourseStepAndProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCourseStepAndProduct not implemented")
}
func (UnimplementedManageServer) UpCourse(context.Context, *UpCourseRequest) (*UpCourseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpCourse not implemented")
}
func (UnimplementedManageServer) DownCourse(context.Context, *DownCourseRequest) (*DownCourseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownCourse not implemented")
}
func (UnimplementedManageServer) AddCourseRecommendInfo(context.Context, *AddCourseRecommendInfoRequest) (*AddCourseRecommendInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCourseRecommendInfo not implemented")
}
func (UnimplementedManageServer) ModCourseRecommendInfo(context.Context, *ModCourseRecommendInfoRequest) (*ModCourseRecommendInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModCourseRecommendInfo not implemented")
}
func (UnimplementedManageServer) DelCourseRecommendInfo(context.Context, *DelCourseRecommendInfoRequest) (*DelCourseRecommendInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCourseRecommendInfo not implemented")
}
func (UnimplementedManageServer) ListCourseRecommend(context.Context, *ListCourseRecommendRequest) (*ListCourseRecommendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCourseRecommend not implemented")
}
func (UnimplementedManageServer) UpCourseRecommend(context.Context, *UpCourseRecommendRequest) (*UpCourseRecommendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpCourseRecommend not implemented")
}
func (UnimplementedManageServer) DownCourseRecommend(context.Context, *DownCourseRecommendRequest) (*DownCourseRecommendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownCourseRecommend not implemented")
}
func (UnimplementedManageServer) AddDoctorInfo(context.Context, *AddDoctorInfoRequest) (*AddDoctorInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDoctorInfo not implemented")
}
func (UnimplementedManageServer) ModDoctorInfo(context.Context, *ModDoctorInfoRequest) (*ModDoctorInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModDoctorInfo not implemented")
}
func (UnimplementedManageServer) DelDoctorInfo(context.Context, *DelDoctorInfoRequest) (*DelDoctorInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDoctorInfo not implemented")
}
func (UnimplementedManageServer) ListDoctor(context.Context, *ListDoctorRequest) (*ListDoctorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDoctor not implemented")
}
func (UnimplementedManageServer) UpDoctor(context.Context, *UpDoctorRequest) (*UpDoctorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpDoctor not implemented")
}
func (UnimplementedManageServer) DownDoctor(context.Context, *DownDoctorRequest) (*DownDoctorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownDoctor not implemented")
}
func (UnimplementedManageServer) AddOperationLog(context.Context, *AddOperationLogRequest) (*AddOperationLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOperationLog not implemented")
}
func (UnimplementedManageServer) ListOperationLog(context.Context, *ListOperationLogRequest) (*ListOperationLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperationLog not implemented")
}
func (UnimplementedManageServer) ListImportTask(context.Context, *ListImportTaskRequest) (*ListImportTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImportTask not implemented")
}
func (UnimplementedManageServer) AddImportTask(context.Context, *AddImportTaskRequest) (*AddImportTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddImportTask not implemented")
}
func (UnimplementedManageServer) ListDataPoint(context.Context, *ListDataPointRequest) (*ListDataPointResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataPoint not implemented")
}
func (UnimplementedManageServer) AddDeviceVersionInfo(context.Context, *AddDeviceVersionRequest) (*AddDeviceVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDeviceVersionInfo not implemented")
}
func (UnimplementedManageServer) ModDeviceVersionInfo(context.Context, *ModDeviceVersionRequest) (*ModDeviceVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModDeviceVersionInfo not implemented")
}
func (UnimplementedManageServer) DelDeviceVersionInfo(context.Context, *DelDeviceVersionRequest) (*DelDeviceVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDeviceVersionInfo not implemented")
}
func (UnimplementedManageServer) ListDeviceVersion(context.Context, *ListDeviceVersionRequest) (*ListDeviceVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceVersion not implemented")
}
func (UnimplementedManageServer) ListCheckPasswordList(context.Context, *GetCheckPasswordListRequest) (*GetCheckPasswordListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCheckPasswordList not implemented")
}
func (UnimplementedManageServer) SetCheckPasswordTimer(context.Context, *SetCheckPasswordTimerRequest) (*SetCheckPasswordTimerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCheckPasswordTimer not implemented")
}
func (UnimplementedManageServer) ListWhiteList(context.Context, *GetListWhiteListRequest) (*GetListWhiteListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWhiteList not implemented")
}
func (UnimplementedManageServer) AddWhiteList(context.Context, *AddListWhiteListRequest) (*AddListWhiteListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWhiteList not implemented")
}
func (UnimplementedManageServer) DelWhiteList(context.Context, *DelListWhiteListRequest) (*DelListWhiteListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelWhiteList not implemented")
}
func (UnimplementedManageServer) SyncWhiteList(context.Context, *SyncWhiteListRequest) (*SyncWhiteListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncWhiteList not implemented")
}
func (UnimplementedManageServer) ListAppConfig(context.Context, *ListAppConfigRequest) (*ListAppConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppConfig not implemented")
}
func (UnimplementedManageServer) AddAppConfig(context.Context, *AddAppConfigRequest) (*AddAppConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppConfig not implemented")
}
func (UnimplementedManageServer) DelAppConfig(context.Context, *DelAppConfigRequest) (*DelAppConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAppConfig not implemented")
}
func (UnimplementedManageServer) ModAppConfig(context.Context, *ModAppConfigRequest) (*ModAppConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModAppConfig not implemented")
}
func (UnimplementedManageServer) SyncAppConfig(context.Context, *SyncAppConfigRequest) (*SyncAppConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAppConfig not implemented")
}
func (UnimplementedManageServer) ListBusiness(context.Context, *ListBusinessRequest) (*ListBusinessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusiness not implemented")
}
func (UnimplementedManageServer) CreateBusiness(context.Context, *CreateBusinessRequest) (*CreateBusinessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusiness not implemented")
}
func (UnimplementedManageServer) AddBusiness(context.Context, *AddBusinessRequest) (*AddBusinessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBusiness not implemented")
}
func (UnimplementedManageServer) ModBusiness(context.Context, *ModBusinessRequest) (*ModBusinessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModBusiness not implemented")
}
func (UnimplementedManageServer) DelBusiness(context.Context, *DelBusinessRequest) (*DelBusinessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBusiness not implemented")
}
func (UnimplementedManageServer) ListShopInfo(context.Context, *ListShopInfoRequest) (*ListShopInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShopInfo not implemented")
}
func (UnimplementedManageServer) AddShopInfo(context.Context, *AddShopInfoRequest) (*AddShopInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShopInfo not implemented")
}
func (UnimplementedManageServer) ModShopInfo(context.Context, *ModShopInfoRequest) (*ModShopInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModShopInfo not implemented")
}
func (UnimplementedManageServer) DelShopInfo(context.Context, *DelShopInfoRequest) (*DelShopInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelShopInfo not implemented")
}
func (UnimplementedManageServer) ListPermission(context.Context, *ListPermissionRequest) (*ListPermissionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermission not implemented")
}
func (UnimplementedManageServer) AddPermission(context.Context, *AddPermissionRequest) (*AddPermissionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermission not implemented")
}
func (UnimplementedManageServer) ModPermission(context.Context, *ModPermissionRequest) (*ModPermissionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModPermission not implemented")
}
func (UnimplementedManageServer) DelPermission(context.Context, *DelPermissionRequest) (*DelPermissionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPermission not implemented")
}
func (UnimplementedManageServer) GetListPermissionByRoleId(context.Context, *ListPermissionByRoleIdRequest) (*ListPermissionByRoleIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListPermissionByRoleId not implemented")
}
func (UnimplementedManageServer) GetListPermissionByManageId(context.Context, *ListPermissionByManageIdRequest) (*ListPermissionByManageIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListPermissionByManageId not implemented")
}
func (UnimplementedManageServer) ListManagerRoleRelation(context.Context, *ListManagerRoleRelationRequest) (*ListManagerRoleRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListManagerRoleRelation not implemented")
}
func (UnimplementedManageServer) AddManagerRoleRelation(context.Context, *AddManagerRoleRelationRequest) (*AddManagerRoleRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddManagerRoleRelation not implemented")
}
func (UnimplementedManageServer) ModManagerRoleRelation(context.Context, *ModManagerRoleRelationRequest) (*ModManagerRoleRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModManagerRoleRelation not implemented")
}
func (UnimplementedManageServer) DelManagerRoleRelation(context.Context, *DelManagerRoleRelationRequest) (*DelManagerRoleRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelManagerRoleRelation not implemented")
}
func (UnimplementedManageServer) ListManagerRoleRelationByManageId(context.Context, *ListManagerRoleRelationByManageIdRequest) (*ListManagerRoleRelationByManageIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListManagerRoleRelationByManageId not implemented")
}
func (UnimplementedManageServer) DelManagerRoleRelationByManageId(context.Context, *DelManagerRoleRelationByManageIdRequest) (*DelManagerRoleRelationByManageIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelManagerRoleRelationByManageId not implemented")
}
func (UnimplementedManageServer) AddManagerRoleRelationByManageId(context.Context, *AddManagerRoleRelationByManageIdRequest) (*AddManagerRoleRelationByManageIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddManagerRoleRelationByManageId not implemented")
}
func (UnimplementedManageServer) ListRolePermissionRelation(context.Context, *ListRolePermissionRelationRequest) (*ListRolePermissionRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRolePermissionRelation not implemented")
}
func (UnimplementedManageServer) AddRolePermissionRelation(context.Context, *AddRolePermissionRelationRequest) (*AddRolePermissionRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRolePermissionRelation not implemented")
}
func (UnimplementedManageServer) ModRolePermissionRelation(context.Context, *ModRolePermissionRelationRequest) (*ModRolePermissionRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModRolePermissionRelation not implemented")
}
func (UnimplementedManageServer) DelRolePermissionRelation(context.Context, *DelRolePermissionRelationRequest) (*DelRolePermissionRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRolePermissionRelation not implemented")
}
func (UnimplementedManageServer) GetSmsCode(context.Context, *GetSmsCodeRequest) (*GetSmsCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmsCode not implemented")
}
func (UnimplementedManageServer) LoginWithSmsCode(context.Context, *LoginWithSmsCodeRequest) (*LoginWithSmsCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithSmsCode not implemented")
}
func (UnimplementedManageServer) GetSmsCodeByCreateBusiness(context.Context, *GetSmsCodeByCreateBusinessRequest) (*GetSmsCodeByCreateBusinessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmsCodeByCreateBusiness not implemented")
}
func (UnimplementedManageServer) GetBusinessById(context.Context, *GetBusinessByIdRequest) (*GetBusinessByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessById not implemented")
}
func (UnimplementedManageServer) GetPreAuthCode(context.Context, *GetPreAuthCodeReq) (*GetPreAuthCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreAuthCode not implemented")
}
func (UnimplementedManageServer) AuthorizationEventReceptionConfig(context.Context, *AuthorizationEventReceptionConfigReq) (*AuthorizationEventReceptionConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizationEventReceptionConfig not implemented")
}
func (UnimplementedManageServer) GetAuthorizerAccessToken(context.Context, *GetAuthorizerAccessTokenReq) (*GetAuthorizerAccessTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorizerAccessToken not implemented")
}
func (UnimplementedManageServer) GetAuthorizerInfo(context.Context, *GetAuthorizerInfoReq) (*GetAuthorizerInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorizerInfo not implemented")
}
func (UnimplementedManageServer) ApiQueryAuth(context.Context, *ApiQueryAuthReq) (*ApiQueryAuthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiQueryAuth not implemented")
}
func (UnimplementedManageServer) GetWechatOfficialAccountPlatform(context.Context, *GetWechatOfficialAccountPlatformReq) (*GetWechatOfficialAccountPlatformResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWechatOfficialAccountPlatform not implemented")
}
func (UnimplementedManageServer) AddWechatOfficialAccountPlatform(context.Context, *AddWechatOfficialAccountPlatformReq) (*AddWechatOfficialAccountPlatformResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWechatOfficialAccountPlatform not implemented")
}
func (UnimplementedManageServer) ModWechatOfficialAccountPlatform(context.Context, *ModWechatOfficialAccountPlatformReq) (*ModWechatOfficialAccountPlatformResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModWechatOfficialAccountPlatform not implemented")
}
func (UnimplementedManageServer) SimpleModUserInfo(context.Context, *SimpleModUserInfoReq) (*SimpleModUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleModUserInfo not implemented")
}
func (UnimplementedManageServer) GetRoleInfoByShopId(context.Context, *GetRoleInfoByShopIdReq) (*GetRoleInfoByShopIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleInfoByShopId not implemented")
}
func (UnimplementedManageServer) ListSystemEnum(context.Context, *ListSystemEnumRequest) (*ListSystemEnumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSystemEnum not implemented")
}
func (UnimplementedManageServer) ListScoreSetting(context.Context, *ListScoreSettingRequest) (*ListScoreSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScoreSetting not implemented")
}
func (UnimplementedManageServer) AddScoreSetting(context.Context, *AddScoreSettingRequest) (*AddScoreSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddScoreSetting not implemented")
}
func (UnimplementedManageServer) ModScoreSetting(context.Context, *ModScoreSettingRequest) (*ModScoreSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModScoreSetting not implemented")
}
func (UnimplementedManageServer) DelScoreSetting(context.Context, *DelScoreSettingRequest) (*DelScoreSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelScoreSetting not implemented")
}
func (UnimplementedManageServer) AddWeiXinFans(context.Context, *AddWeiXinFansRequest) (*AddWeiXinFansResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWeiXinFans not implemented")
}
func (UnimplementedManageServer) DelWeiXinFans(context.Context, *DelWeiXinFansRequest) (*DelWeiXinFansResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelWeiXinFans not implemented")
}
func (UnimplementedManageServer) GetAuthorizerAccessTokenByAppId(context.Context, *GetAuthorizerAccessTokenByAppIdRequest) (*GetAuthorizerAccessTokenByAppIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorizerAccessTokenByAppId not implemented")
}
func (UnimplementedManageServer) SCAN(context.Context, *SCANRequest) (*SCANResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SCAN not implemented")
}
func (UnimplementedManageServer) AddPackages(context.Context, *AddPackagesReq) (*AddPackagesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPackages not implemented")
}
func (UnimplementedManageServer) ListPackages(context.Context, *ListPackagesReq) (*ListPackagesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPackages not implemented")
}
func (UnimplementedManageServer) ModPackages(context.Context, *ModPackagesReq) (*ModPackagesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModPackages not implemented")
}
func (UnimplementedManageServer) DelPackages(context.Context, *DelPackagesReq) (*DelPackagesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPackages not implemented")
}
func (UnimplementedManageServer) ListOrder(context.Context, *ListOrderReq) (*ListOrderRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrder not implemented")
}
func (UnimplementedManageServer) SCANByRecordId(context.Context, *SCANByRecordIdRequest) (*SCANByRecordIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SCANByRecordId not implemented")
}
func (UnimplementedManageServer) GetOSSInfo(context.Context, *GetOssInfoRequest) (*GetOssInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOSSInfo not implemented")
}
func (UnimplementedManageServer) ExportDeviceUser(context.Context, *ExportDeviceUserRequest) (*ExportDeviceUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportDeviceUser not implemented")
}
func (UnimplementedManageServer) ExportMeasureSkinRecord(context.Context, *ExportExportMeasureSkinRecordRequest) (*ExportExportMeasureSkinRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportMeasureSkinRecord not implemented")
}
func (UnimplementedManageServer) AddSystemSaying(context.Context, *AddSystemSayingRequest) (*AddSystemSayingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSystemSaying not implemented")
}
func (UnimplementedManageServer) ListSystemSaying(context.Context, *ListSystemSayingRequest) (*ListSystemSayingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSystemSaying not implemented")
}
func (UnimplementedManageServer) ModSystemSaying(context.Context, *ModSystemSayingRequest) (*ModSystemSayingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModSystemSaying not implemented")
}
func (UnimplementedManageServer) DelSystemSaying(context.Context, *DelSystemSayingRequest) (*DelSystemSayingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSystemSaying not implemented")
}
func (UnimplementedManageServer) OnOffSystemSaying(context.Context, *OnOffSystemSayingRequest) (*OnOffSystemSayingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnOffSystemSaying not implemented")
}
func (UnimplementedManageServer) AddSkinType(context.Context, *AddSkinTypeRequest) (*AddSkinTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSkinType not implemented")
}
func (UnimplementedManageServer) ListSkinType(context.Context, *ListSkinTypeRequest) (*ListSkinTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSkinType not implemented")
}
func (UnimplementedManageServer) ModSkinType(context.Context, *ModSkinTypeRequest) (*ModSkinTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModSkinType not implemented")
}
func (UnimplementedManageServer) DelSkinType(context.Context, *DelSkinTypeRequest) (*DelSkinTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSkinType not implemented")
}
func (UnimplementedManageServer) OnOffSkinType(context.Context, *OnOffSkinTypeRequest) (*OnOffSkinTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnOffSkinType not implemented")
}
func (UnimplementedManageServer) SetLoginTokenCache(context.Context, *SetLoginTokenCacheReq) (*SetLoginTokenCacheResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLoginTokenCache not implemented")
}
func (UnimplementedManageServer) GetLoginTokenCache(context.Context, *GetLoginTokenCacheReq) (*GetLoginTokenCacheResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginTokenCache not implemented")
}
func (UnimplementedManageServer) mustEmbedUnimplementedManageServer() {}

// UnsafeManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManageServer will
// result in compilation errors.
type UnsafeManageServer interface {
	mustEmbedUnimplementedManageServer()
}

func RegisterManageServer(s grpc.ServiceRegistrar, srv ManageServer) {
	s.RegisterService(&Manage_ServiceDesc, srv)
}

func _Manage_Summary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).Summary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/Summary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).Summary(ctx, req.(*SummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ExportSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ExportSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ExportSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ExportSummary(ctx, req.(*ExportSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListManager(ctx, req.(*ListManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModPasswd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModPasswdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModPasswd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModPasswd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModPasswd(ctx, req.(*ModPasswdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModUserInfo(ctx, req.(*ModUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelUser(ctx, req.(*DelUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ExportUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ExportUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ExportUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ExportUser(ctx, req.(*ExportUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddRoleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddRoleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddRoleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddRoleInfo(ctx, req.(*AddRoleInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModRoleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModRoleInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModRoleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModRoleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModRoleInfo(ctx, req.(*ModRoleInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelRoleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRoleInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelRoleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelRoleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelRoleInfo(ctx, req.(*DelRoleInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListRole(ctx, req.(*ListRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_FronzenRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrozenRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).FronzenRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/FronzenRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).FronzenRole(ctx, req.(*FrozenRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_RecoverRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).RecoverRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/RecoverRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).RecoverRole(ctx, req.(*RecoverRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddMeasureSkinDimension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMeasureSkinDimensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddMeasureSkinDimension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddMeasureSkinDimension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddMeasureSkinDimension(ctx, req.(*AddMeasureSkinDimensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListMeasureSkinDimension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMeasureSkinDimensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListMeasureSkinDimension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListMeasureSkinDimension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListMeasureSkinDimension(ctx, req.(*ListMeasureSkinDimensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModMeasureSkinDimension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModMeasureSkinDimensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModMeasureSkinDimension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModMeasureSkinDimension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModMeasureSkinDimension(ctx, req.(*ModMeasureSkinDimensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelMeasureSkinDimension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMeasureSkinDimensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelMeasureSkinDimension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelMeasureSkinDimension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelMeasureSkinDimension(ctx, req.(*DelMeasureSkinDimensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddMeasureDimensionSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMeasureDimensionSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddMeasureDimensionSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddMeasureDimensionSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddMeasureDimensionSetting(ctx, req.(*AddMeasureDimensionSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListMeasureDimensionSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMeasureDimensionSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListMeasureDimensionSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListMeasureDimensionSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListMeasureDimensionSetting(ctx, req.(*ListMeasureDimensionSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModMeasureDimensionSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModMeasureDimensionSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModMeasureDimensionSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModMeasureDimensionSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModMeasureDimensionSetting(ctx, req.(*ModMeasureDimensionSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelMeasureDimensionSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMeasureDimensionSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelMeasureDimensionSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelMeasureDimensionSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelMeasureDimensionSetting(ctx, req.(*DelMeasureDimensionSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddReportSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReportSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddReportSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddReportSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddReportSetting(ctx, req.(*AddReportSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelReportSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelReportSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelReportSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelReportSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelReportSetting(ctx, req.(*DelReportSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModReportSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModReportSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModReportSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModReportSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModReportSetting(ctx, req.(*ModReportSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListReportSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReportSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListReportSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListReportSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListReportSetting(ctx, req.(*ListReportSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddProductDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddProductDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddProductDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddProductDict(ctx, req.(*AddProductDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListProductDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListProductDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListProductDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListProductDict(ctx, req.(*ListProductDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModProductDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModProductDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModProductDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModProductDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModProductDict(ctx, req.(*ModProductDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelProductDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelProductDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelProductDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelProductDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelProductDict(ctx, req.(*DelProductDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddDict(ctx, req.(*AddDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelDict(ctx, req.(*DelDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModDict(ctx, req.(*ModDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListDict(ctx, req.(*ListDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddThemeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddTheme(ctx, req.(*AddThemeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelThemeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelTheme(ctx, req.(*DelThemeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModThemeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModTheme(ctx, req.(*ModThemeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListThemeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListTheme(ctx, req.(*ListThemeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddPushMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPushMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddPushMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddPushMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddPushMessage(ctx, req.(*AddPushMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListPushMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPushMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListPushMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListPushMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListPushMessage(ctx, req.(*ListPushMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModPushMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModPushMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModPushMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModPushMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModPushMessage(ctx, req.(*ModPushMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelPushMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelPushMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelPushMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelPushMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelPushMessage(ctx, req.(*DelPushMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListIssue(ctx, req.(*ListIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModIssue(ctx, req.(*ModIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelIssue(ctx, req.(*DelIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListMachines(ctx, req.(*ListMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddMachines(ctx, req.(*AddMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelMachines(ctx, req.(*DelMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModMachines(ctx, req.(*ModMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListMachinesIdleRes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachinesIdleResRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListMachinesIdleRes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListMachinesIdleRes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListMachinesIdleRes(ctx, req.(*ListMachinesIdleResRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddMachinesIdleRes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMachinesIdleResRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddMachinesIdleRes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddMachinesIdleRes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddMachinesIdleRes(ctx, req.(*AddMachinesIdleResRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelMachinesIdleRes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMachinesIdleResRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelMachinesIdleRes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelMachinesIdleRes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelMachinesIdleRes(ctx, req.(*DelMachinesIdleResRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModMachinesIdleRes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModMachinesIdleResRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModMachinesIdleRes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModMachinesIdleRes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModMachinesIdleRes(ctx, req.(*ModMachinesIdleResRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListSkinCareProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSkinCareProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListSkinCareProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListSkinCareProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListSkinCareProduct(ctx, req.(*ListSkinCareProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddSkinCareProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSkinCareProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddSkinCareProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddSkinCareProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddSkinCareProduct(ctx, req.(*AddSkinCareProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelSkinCareProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSkinCareProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelSkinCareProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelSkinCareProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelSkinCareProduct(ctx, req.(*DelSkinCareProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModSkinCareProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModSkinCareProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModSkinCareProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModSkinCareProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModSkinCareProduct(ctx, req.(*ModSkinCareProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_UpSkinCareProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpSkinCareProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).UpSkinCareProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/UpSkinCareProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).UpSkinCareProduct(ctx, req.(*UpSkinCareProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DownSkinCareProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownSkinCareProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DownSkinCareProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DownSkinCareProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DownSkinCareProduct(ctx, req.(*DownSkinCareProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_BatchSyncRecommendProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSyncRecommendProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).BatchSyncRecommendProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/BatchSyncRecommendProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).BatchSyncRecommendProduct(ctx, req.(*BatchSyncRecommendProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_BatchSyncRecommendProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSyncRecommendProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).BatchSyncRecommendProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/BatchSyncRecommendProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).BatchSyncRecommendProject(ctx, req.(*BatchSyncRecommendProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddSkinCareProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSkinCareProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddSkinCareProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddSkinCareProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddSkinCareProject(ctx, req.(*AddSkinCareProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelSkinCareProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSkinCareProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelSkinCareProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelSkinCareProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelSkinCareProject(ctx, req.(*DelSkinCareProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModSkinCareProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModSkinCareProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModSkinCareProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModSkinCareProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModSkinCareProject(ctx, req.(*ModSkinCareProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListSkinCareProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSkinCareProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListSkinCareProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListSkinCareProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListSkinCareProject(ctx, req.(*ListSkinCareProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_OnOffSkinCareProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnOffSkinCareProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).OnOffSkinCareProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/OnOffSkinCareProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).OnOffSkinCareProject(ctx, req.(*OnOffSkinCareProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListCosmeticsProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCosmeticsProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListCosmeticsProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListCosmeticsProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListCosmeticsProduct(ctx, req.(*ListCosmeticsProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddCosmeticsProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCosmeticsProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddCosmeticsProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddCosmeticsProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddCosmeticsProduct(ctx, req.(*AddCosmeticsProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelCosmeticsProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCosmeticsProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelCosmeticsProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelCosmeticsProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelCosmeticsProduct(ctx, req.(*DelCosmeticsProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModCosmeticsProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModCosmeticsProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModCosmeticsProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModCosmeticsProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModCosmeticsProduct(ctx, req.(*ModCosmeticsProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_UpCosmeticsProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpCosmeticsProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).UpCosmeticsProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/UpCosmeticsProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).UpCosmeticsProduct(ctx, req.(*UpCosmeticsProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DownCosmeticsProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownCosmeticsProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DownCosmeticsProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DownCosmeticsProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DownCosmeticsProduct(ctx, req.(*DownCosmeticsProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListMichellPhan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMichellPhanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListMichellPhan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListMichellPhan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListMichellPhan(ctx, req.(*ListMichellPhanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddMichellPhan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMichellPhanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddMichellPhan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddMichellPhan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddMichellPhan(ctx, req.(*AddMichellPhanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelMichellPhan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMichellPhanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelMichellPhan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelMichellPhan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelMichellPhan(ctx, req.(*DelMichellPhanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModMichellPhan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModMichellPhanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModMichellPhan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModMichellPhan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModMichellPhan(ctx, req.(*ModMichellPhanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListSkinCareAdvice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSkinCareAdviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListSkinCareAdvice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListSkinCareAdvice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListSkinCareAdvice(ctx, req.(*ListSkinCareAdviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddSkinCareAdvice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSkinCareAdviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddSkinCareAdvice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddSkinCareAdvice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddSkinCareAdvice(ctx, req.(*AddSkinCareAdviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelSkinCareAdvice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSkinCareAdviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelSkinCareAdvice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelSkinCareAdvice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelSkinCareAdvice(ctx, req.(*DelSkinCareAdviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModSkinCareAdvice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModSkinCareAdviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModSkinCareAdvice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModSkinCareAdvice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModSkinCareAdvice(ctx, req.(*ModSkinCareAdviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_UpSkinCareAdvice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpSkinCareAdviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).UpSkinCareAdvice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/UpSkinCareAdvice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).UpSkinCareAdvice(ctx, req.(*UpSkinCareAdviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DownSkinCareAdvice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownSkinCareAdviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DownSkinCareAdvice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DownSkinCareAdvice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DownSkinCareAdvice(ctx, req.(*DownSkinCareAdviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListMeasureSkinRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMeasureSkinRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListMeasureSkinRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListMeasureSkinRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListMeasureSkinRecord(ctx, req.(*ListMeasureSkinRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetMeasureSkinDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeasureSkinDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetMeasureSkinDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/GetMeasureSkinDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetMeasureSkinDetail(ctx, req.(*GetMeasureSkinDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelMeasureSkinRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMeasureSkinRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelMeasureSkinRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelMeasureSkinRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelMeasureSkinRecord(ctx, req.(*DelMeasureSkinRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListProductRecommendationWeightSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductRecommendationWeightSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListProductRecommendationWeightSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListProductRecommendationWeightSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListProductRecommendationWeightSetting(ctx, req.(*ListProductRecommendationWeightSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddProductRecommendationWeightSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductRecommendationWeightSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddProductRecommendationWeightSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddProductRecommendationWeightSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddProductRecommendationWeightSetting(ctx, req.(*AddProductRecommendationWeightSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelProductRecommendationWeightSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelProductRecommendationWeightSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelProductRecommendationWeightSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelProductRecommendationWeightSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelProductRecommendationWeightSetting(ctx, req.(*DelProductRecommendationWeightSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModProductRecommendationWeightSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModProductRecommendationWeightSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModProductRecommendationWeightSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModProductRecommendationWeightSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModProductRecommendationWeightSetting(ctx, req.(*ModProductRecommendationWeightSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListDeviceUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeviceUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListDeviceUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListDeviceUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListDeviceUser(ctx, req.(*ListDeviceUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_FrozenDeviceUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrozenDeviceUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).FrozenDeviceUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/FrozenDeviceUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).FrozenDeviceUser(ctx, req.(*FrozenDeviceUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_RecoverDeviceUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverDeviceUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).RecoverDeviceUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/RecoverDeviceUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).RecoverDeviceUser(ctx, req.(*RecoverDeviceUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddCourseClassInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCourseClassInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddCourseClassInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddCourseClassInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddCourseClassInfo(ctx, req.(*AddCourseClassInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModCourseClassInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModCourseClassInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModCourseClassInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModCourseClassInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModCourseClassInfo(ctx, req.(*ModCourseClassInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelCourseClassInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCourseClassInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelCourseClassInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelCourseClassInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelCourseClassInfo(ctx, req.(*DelCourseClassInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListCourseClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCourseClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListCourseClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListCourseClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListCourseClass(ctx, req.(*ListCourseClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetCourseClassNameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseClassNameListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetCourseClassNameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/GetCourseClassNameList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetCourseClassNameList(ctx, req.(*GetCourseClassNameListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_UpCourseClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpCourseClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).UpCourseClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/UpCourseClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).UpCourseClass(ctx, req.(*UpCourseClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DownCourseClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownCourseClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DownCourseClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DownCourseClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DownCourseClass(ctx, req.(*DownCourseClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetYouZanOnSaleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetYouZanOnSaleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetYouZanOnSaleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/GetYouZanOnSaleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetYouZanOnSaleList(ctx, req.(*GetYouZanOnSaleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetYouZanItemDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetYouZanItemDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetYouZanItemDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/GetYouZanItemDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetYouZanItemDetail(ctx, req.(*GetYouZanItemDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddWiseManInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWiseManInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddWiseManInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddWiseManInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddWiseManInfo(ctx, req.(*AddWiseManInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModWiseManInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModWiseManInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModWiseManInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModWiseManInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModWiseManInfo(ctx, req.(*ModWiseManInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelWiseManInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelWiseManInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelWiseManInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelWiseManInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelWiseManInfo(ctx, req.(*DelWiseManInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListWiseMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWiseManRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListWiseMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListWiseMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListWiseMan(ctx, req.(*ListWiseManRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetWiseManNameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWiseManNameListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetWiseManNameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/GetWiseManNameList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetWiseManNameList(ctx, req.(*GetWiseManNameListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_UpWiseMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpWiseManRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).UpWiseMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/UpWiseMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).UpWiseMan(ctx, req.(*UpWiseManRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DownWiseMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownWiseManRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DownWiseMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DownWiseMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DownWiseMan(ctx, req.(*DownWiseManRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddCourseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCourseInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddCourseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddCourseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddCourseInfo(ctx, req.(*AddCourseInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModCourseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModCourseInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModCourseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModCourseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModCourseInfo(ctx, req.(*ModCourseInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelCourseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCourseInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelCourseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelCourseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelCourseInfo(ctx, req.(*DelCourseInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListCourse(ctx, req.(*ListCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListCanRecommendCourseName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCanRecommendCourseNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListCanRecommendCourseName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListCanRecommendCourseName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListCanRecommendCourseName(ctx, req.(*ListCanRecommendCourseNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListCourseStepAndProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCourseStepAndProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListCourseStepAndProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListCourseStepAndProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListCourseStepAndProduct(ctx, req.(*ListCourseStepAndProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_UpCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).UpCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/UpCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).UpCourse(ctx, req.(*UpCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DownCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DownCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DownCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DownCourse(ctx, req.(*DownCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddCourseRecommendInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCourseRecommendInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddCourseRecommendInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddCourseRecommendInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddCourseRecommendInfo(ctx, req.(*AddCourseRecommendInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModCourseRecommendInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModCourseRecommendInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModCourseRecommendInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModCourseRecommendInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModCourseRecommendInfo(ctx, req.(*ModCourseRecommendInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelCourseRecommendInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCourseRecommendInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelCourseRecommendInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelCourseRecommendInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelCourseRecommendInfo(ctx, req.(*DelCourseRecommendInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListCourseRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCourseRecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListCourseRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListCourseRecommend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListCourseRecommend(ctx, req.(*ListCourseRecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_UpCourseRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpCourseRecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).UpCourseRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/UpCourseRecommend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).UpCourseRecommend(ctx, req.(*UpCourseRecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DownCourseRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownCourseRecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DownCourseRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DownCourseRecommend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DownCourseRecommend(ctx, req.(*DownCourseRecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddDoctorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDoctorInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddDoctorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddDoctorInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddDoctorInfo(ctx, req.(*AddDoctorInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModDoctorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModDoctorInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModDoctorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModDoctorInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModDoctorInfo(ctx, req.(*ModDoctorInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelDoctorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDoctorInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelDoctorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelDoctorInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelDoctorInfo(ctx, req.(*DelDoctorInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDoctorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListDoctor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListDoctor(ctx, req.(*ListDoctorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_UpDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpDoctorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).UpDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/UpDoctor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).UpDoctor(ctx, req.(*UpDoctorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DownDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownDoctorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DownDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DownDoctor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DownDoctor(ctx, req.(*DownDoctorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOperationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddOperationLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddOperationLog(ctx, req.(*AddOperationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListOperationLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListOperationLog(ctx, req.(*ListOperationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListImportTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImportTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListImportTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListImportTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListImportTask(ctx, req.(*ListImportTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddImportTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddImportTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddImportTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddImportTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddImportTask(ctx, req.(*AddImportTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListDataPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListDataPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListDataPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListDataPoint(ctx, req.(*ListDataPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddDeviceVersionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDeviceVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddDeviceVersionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddDeviceVersionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddDeviceVersionInfo(ctx, req.(*AddDeviceVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModDeviceVersionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModDeviceVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModDeviceVersionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModDeviceVersionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModDeviceVersionInfo(ctx, req.(*ModDeviceVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelDeviceVersionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDeviceVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelDeviceVersionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelDeviceVersionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelDeviceVersionInfo(ctx, req.(*DelDeviceVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListDeviceVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeviceVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListDeviceVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListDeviceVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListDeviceVersion(ctx, req.(*ListDeviceVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListCheckPasswordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCheckPasswordListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListCheckPasswordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListCheckPasswordList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListCheckPasswordList(ctx, req.(*GetCheckPasswordListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SetCheckPasswordTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCheckPasswordTimerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SetCheckPasswordTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/SetCheckPasswordTimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SetCheckPasswordTimer(ctx, req.(*SetCheckPasswordTimerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListWhiteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListWhiteList(ctx, req.(*GetListWhiteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddListWhiteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddWhiteList(ctx, req.(*AddListWhiteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelListWhiteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelWhiteList(ctx, req.(*DelListWhiteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SyncWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncWhiteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SyncWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/SyncWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SyncWhiteList(ctx, req.(*SyncWhiteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListAppConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListAppConfig(ctx, req.(*ListAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddAppConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddAppConfig(ctx, req.(*AddAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelAppConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelAppConfig(ctx, req.(*DelAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModAppConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModAppConfig(ctx, req.(*ModAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SyncAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SyncAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/SyncAppConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SyncAppConfig(ctx, req.(*SyncAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListBusiness(ctx, req.(*ListBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_CreateBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).CreateBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/CreateBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).CreateBusiness(ctx, req.(*CreateBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddBusiness(ctx, req.(*AddBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModBusiness(ctx, req.(*ModBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelBusiness(ctx, req.(*DelBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListShopInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShopInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListShopInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListShopInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListShopInfo(ctx, req.(*ListShopInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddShopInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddShopInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddShopInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddShopInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddShopInfo(ctx, req.(*AddShopInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModShopInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModShopInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModShopInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModShopInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModShopInfo(ctx, req.(*ModShopInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelShopInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelShopInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelShopInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelShopInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelShopInfo(ctx, req.(*DelShopInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListPermission(ctx, req.(*ListPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddPermission(ctx, req.(*AddPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModPermission(ctx, req.(*ModPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelPermission(ctx, req.(*DelPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetListPermissionByRoleId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionByRoleIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetListPermissionByRoleId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/GetListPermissionByRoleId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetListPermissionByRoleId(ctx, req.(*ListPermissionByRoleIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetListPermissionByManageId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionByManageIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetListPermissionByManageId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/GetListPermissionByManageId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetListPermissionByManageId(ctx, req.(*ListPermissionByManageIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListManagerRoleRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListManagerRoleRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListManagerRoleRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListManagerRoleRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListManagerRoleRelation(ctx, req.(*ListManagerRoleRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddManagerRoleRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddManagerRoleRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddManagerRoleRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddManagerRoleRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddManagerRoleRelation(ctx, req.(*AddManagerRoleRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModManagerRoleRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModManagerRoleRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModManagerRoleRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModManagerRoleRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModManagerRoleRelation(ctx, req.(*ModManagerRoleRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelManagerRoleRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelManagerRoleRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelManagerRoleRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelManagerRoleRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelManagerRoleRelation(ctx, req.(*DelManagerRoleRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListManagerRoleRelationByManageId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListManagerRoleRelationByManageIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListManagerRoleRelationByManageId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListManagerRoleRelationByManageId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListManagerRoleRelationByManageId(ctx, req.(*ListManagerRoleRelationByManageIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelManagerRoleRelationByManageId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelManagerRoleRelationByManageIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelManagerRoleRelationByManageId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelManagerRoleRelationByManageId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelManagerRoleRelationByManageId(ctx, req.(*DelManagerRoleRelationByManageIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddManagerRoleRelationByManageId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddManagerRoleRelationByManageIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddManagerRoleRelationByManageId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddManagerRoleRelationByManageId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddManagerRoleRelationByManageId(ctx, req.(*AddManagerRoleRelationByManageIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListRolePermissionRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolePermissionRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListRolePermissionRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListRolePermissionRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListRolePermissionRelation(ctx, req.(*ListRolePermissionRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddRolePermissionRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRolePermissionRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddRolePermissionRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddRolePermissionRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddRolePermissionRelation(ctx, req.(*AddRolePermissionRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModRolePermissionRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModRolePermissionRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModRolePermissionRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModRolePermissionRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModRolePermissionRelation(ctx, req.(*ModRolePermissionRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelRolePermissionRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRolePermissionRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelRolePermissionRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelRolePermissionRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelRolePermissionRelation(ctx, req.(*DelRolePermissionRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetSmsCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmsCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetSmsCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/GetSmsCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetSmsCode(ctx, req.(*GetSmsCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_LoginWithSmsCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithSmsCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).LoginWithSmsCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/LoginWithSmsCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).LoginWithSmsCode(ctx, req.(*LoginWithSmsCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetSmsCodeByCreateBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmsCodeByCreateBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetSmsCodeByCreateBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/GetSmsCodeByCreateBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetSmsCodeByCreateBusiness(ctx, req.(*GetSmsCodeByCreateBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetBusinessById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetBusinessById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/GetBusinessById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetBusinessById(ctx, req.(*GetBusinessByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetPreAuthCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreAuthCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetPreAuthCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/GetPreAuthCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetPreAuthCode(ctx, req.(*GetPreAuthCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AuthorizationEventReceptionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationEventReceptionConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AuthorizationEventReceptionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AuthorizationEventReceptionConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AuthorizationEventReceptionConfig(ctx, req.(*AuthorizationEventReceptionConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetAuthorizerAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorizerAccessTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetAuthorizerAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/GetAuthorizerAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetAuthorizerAccessToken(ctx, req.(*GetAuthorizerAccessTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetAuthorizerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorizerInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetAuthorizerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/GetAuthorizerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetAuthorizerInfo(ctx, req.(*GetAuthorizerInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ApiQueryAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiQueryAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ApiQueryAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ApiQueryAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ApiQueryAuth(ctx, req.(*ApiQueryAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetWechatOfficialAccountPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWechatOfficialAccountPlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetWechatOfficialAccountPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/GetWechatOfficialAccountPlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetWechatOfficialAccountPlatform(ctx, req.(*GetWechatOfficialAccountPlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddWechatOfficialAccountPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWechatOfficialAccountPlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddWechatOfficialAccountPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddWechatOfficialAccountPlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddWechatOfficialAccountPlatform(ctx, req.(*AddWechatOfficialAccountPlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModWechatOfficialAccountPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModWechatOfficialAccountPlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModWechatOfficialAccountPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModWechatOfficialAccountPlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModWechatOfficialAccountPlatform(ctx, req.(*ModWechatOfficialAccountPlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SimpleModUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleModUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SimpleModUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/SimpleModUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SimpleModUserInfo(ctx, req.(*SimpleModUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetRoleInfoByShopId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleInfoByShopIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetRoleInfoByShopId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/GetRoleInfoByShopId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetRoleInfoByShopId(ctx, req.(*GetRoleInfoByShopIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListSystemEnum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSystemEnumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListSystemEnum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListSystemEnum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListSystemEnum(ctx, req.(*ListSystemEnumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListScoreSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScoreSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListScoreSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListScoreSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListScoreSetting(ctx, req.(*ListScoreSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddScoreSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddScoreSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddScoreSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddScoreSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddScoreSetting(ctx, req.(*AddScoreSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModScoreSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModScoreSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModScoreSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModScoreSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModScoreSetting(ctx, req.(*ModScoreSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelScoreSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelScoreSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelScoreSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelScoreSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelScoreSetting(ctx, req.(*DelScoreSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddWeiXinFans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWeiXinFansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddWeiXinFans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddWeiXinFans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddWeiXinFans(ctx, req.(*AddWeiXinFansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelWeiXinFans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelWeiXinFansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelWeiXinFans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelWeiXinFans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelWeiXinFans(ctx, req.(*DelWeiXinFansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetAuthorizerAccessTokenByAppId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorizerAccessTokenByAppIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetAuthorizerAccessTokenByAppId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/GetAuthorizerAccessTokenByAppId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetAuthorizerAccessTokenByAppId(ctx, req.(*GetAuthorizerAccessTokenByAppIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SCAN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SCANRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SCAN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/SCAN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SCAN(ctx, req.(*SCANRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPackagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddPackages(ctx, req.(*AddPackagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPackagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListPackages(ctx, req.(*ListPackagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModPackagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModPackages(ctx, req.(*ModPackagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelPackagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelPackages(ctx, req.(*DelPackagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListOrder(ctx, req.(*ListOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SCANByRecordId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SCANByRecordIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SCANByRecordId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/SCANByRecordId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SCANByRecordId(ctx, req.(*SCANByRecordIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetOSSInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOssInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetOSSInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/GetOSSInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetOSSInfo(ctx, req.(*GetOssInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ExportDeviceUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportDeviceUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ExportDeviceUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ExportDeviceUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ExportDeviceUser(ctx, req.(*ExportDeviceUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ExportMeasureSkinRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportExportMeasureSkinRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ExportMeasureSkinRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ExportMeasureSkinRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ExportMeasureSkinRecord(ctx, req.(*ExportExportMeasureSkinRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddSystemSaying_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSystemSayingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddSystemSaying(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddSystemSaying",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddSystemSaying(ctx, req.(*AddSystemSayingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListSystemSaying_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSystemSayingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListSystemSaying(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListSystemSaying",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListSystemSaying(ctx, req.(*ListSystemSayingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModSystemSaying_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModSystemSayingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModSystemSaying(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModSystemSaying",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModSystemSaying(ctx, req.(*ModSystemSayingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelSystemSaying_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSystemSayingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelSystemSaying(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelSystemSaying",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelSystemSaying(ctx, req.(*DelSystemSayingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_OnOffSystemSaying_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnOffSystemSayingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).OnOffSystemSaying(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/OnOffSystemSaying",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).OnOffSystemSaying(ctx, req.(*OnOffSystemSayingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddSkinType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSkinTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddSkinType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/AddSkinType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddSkinType(ctx, req.(*AddSkinTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ListSkinType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSkinTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ListSkinType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ListSkinType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ListSkinType(ctx, req.(*ListSkinTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_ModSkinType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModSkinTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).ModSkinType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/ModSkinType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).ModSkinType(ctx, req.(*ModSkinTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DelSkinType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSkinTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DelSkinType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/DelSkinType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DelSkinType(ctx, req.(*DelSkinTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_OnOffSkinType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnOffSkinTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).OnOffSkinType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/OnOffSkinType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).OnOffSkinType(ctx, req.(*OnOffSkinTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SetLoginTokenCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLoginTokenCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SetLoginTokenCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/SetLoginTokenCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SetLoginTokenCache(ctx, req.(*SetLoginTokenCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetLoginTokenCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginTokenCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetLoginTokenCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.Manage/GetLoginTokenCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetLoginTokenCache(ctx, req.(*GetLoginTokenCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Manage_ServiceDesc is the grpc.ServiceDesc for Manage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manage.Manage",
	HandlerType: (*ManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Summary",
			Handler:    _Manage_Summary_Handler,
		},
		{
			MethodName: "ExportSummary",
			Handler:    _Manage_ExportSummary_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Manage_Login_Handler,
		},
		{
			MethodName: "ListManager",
			Handler:    _Manage_ListManager_Handler,
		},
		{
			MethodName: "ModPasswd",
			Handler:    _Manage_ModPasswd_Handler,
		},
		{
			MethodName: "ModUserInfo",
			Handler:    _Manage_ModUserInfo_Handler,
		},
		{
			MethodName: "DelUser",
			Handler:    _Manage_DelUser_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Manage_AddUser_Handler,
		},
		{
			MethodName: "ExportUser",
			Handler:    _Manage_ExportUser_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _Manage_UploadFile_Handler,
		},
		{
			MethodName: "AddRoleInfo",
			Handler:    _Manage_AddRoleInfo_Handler,
		},
		{
			MethodName: "ModRoleInfo",
			Handler:    _Manage_ModRoleInfo_Handler,
		},
		{
			MethodName: "DelRoleInfo",
			Handler:    _Manage_DelRoleInfo_Handler,
		},
		{
			MethodName: "ListRole",
			Handler:    _Manage_ListRole_Handler,
		},
		{
			MethodName: "FronzenRole",
			Handler:    _Manage_FronzenRole_Handler,
		},
		{
			MethodName: "RecoverRole",
			Handler:    _Manage_RecoverRole_Handler,
		},
		{
			MethodName: "AddMeasureSkinDimension",
			Handler:    _Manage_AddMeasureSkinDimension_Handler,
		},
		{
			MethodName: "ListMeasureSkinDimension",
			Handler:    _Manage_ListMeasureSkinDimension_Handler,
		},
		{
			MethodName: "ModMeasureSkinDimension",
			Handler:    _Manage_ModMeasureSkinDimension_Handler,
		},
		{
			MethodName: "DelMeasureSkinDimension",
			Handler:    _Manage_DelMeasureSkinDimension_Handler,
		},
		{
			MethodName: "AddMeasureDimensionSetting",
			Handler:    _Manage_AddMeasureDimensionSetting_Handler,
		},
		{
			MethodName: "ListMeasureDimensionSetting",
			Handler:    _Manage_ListMeasureDimensionSetting_Handler,
		},
		{
			MethodName: "ModMeasureDimensionSetting",
			Handler:    _Manage_ModMeasureDimensionSetting_Handler,
		},
		{
			MethodName: "DelMeasureDimensionSetting",
			Handler:    _Manage_DelMeasureDimensionSetting_Handler,
		},
		{
			MethodName: "AddReportSetting",
			Handler:    _Manage_AddReportSetting_Handler,
		},
		{
			MethodName: "DelReportSetting",
			Handler:    _Manage_DelReportSetting_Handler,
		},
		{
			MethodName: "ModReportSetting",
			Handler:    _Manage_ModReportSetting_Handler,
		},
		{
			MethodName: "ListReportSetting",
			Handler:    _Manage_ListReportSetting_Handler,
		},
		{
			MethodName: "AddProductDict",
			Handler:    _Manage_AddProductDict_Handler,
		},
		{
			MethodName: "ListProductDict",
			Handler:    _Manage_ListProductDict_Handler,
		},
		{
			MethodName: "ModProductDict",
			Handler:    _Manage_ModProductDict_Handler,
		},
		{
			MethodName: "DelProductDict",
			Handler:    _Manage_DelProductDict_Handler,
		},
		{
			MethodName: "AddDict",
			Handler:    _Manage_AddDict_Handler,
		},
		{
			MethodName: "DelDict",
			Handler:    _Manage_DelDict_Handler,
		},
		{
			MethodName: "ModDict",
			Handler:    _Manage_ModDict_Handler,
		},
		{
			MethodName: "ListDict",
			Handler:    _Manage_ListDict_Handler,
		},
		{
			MethodName: "AddTheme",
			Handler:    _Manage_AddTheme_Handler,
		},
		{
			MethodName: "DelTheme",
			Handler:    _Manage_DelTheme_Handler,
		},
		{
			MethodName: "ModTheme",
			Handler:    _Manage_ModTheme_Handler,
		},
		{
			MethodName: "ListTheme",
			Handler:    _Manage_ListTheme_Handler,
		},
		{
			MethodName: "AddPushMessage",
			Handler:    _Manage_AddPushMessage_Handler,
		},
		{
			MethodName: "ListPushMessage",
			Handler:    _Manage_ListPushMessage_Handler,
		},
		{
			MethodName: "ModPushMessage",
			Handler:    _Manage_ModPushMessage_Handler,
		},
		{
			MethodName: "DelPushMessage",
			Handler:    _Manage_DelPushMessage_Handler,
		},
		{
			MethodName: "ListIssue",
			Handler:    _Manage_ListIssue_Handler,
		},
		{
			MethodName: "ModIssue",
			Handler:    _Manage_ModIssue_Handler,
		},
		{
			MethodName: "DelIssue",
			Handler:    _Manage_DelIssue_Handler,
		},
		{
			MethodName: "ListMachines",
			Handler:    _Manage_ListMachines_Handler,
		},
		{
			MethodName: "AddMachines",
			Handler:    _Manage_AddMachines_Handler,
		},
		{
			MethodName: "DelMachines",
			Handler:    _Manage_DelMachines_Handler,
		},
		{
			MethodName: "ModMachines",
			Handler:    _Manage_ModMachines_Handler,
		},
		{
			MethodName: "ListMachinesIdleRes",
			Handler:    _Manage_ListMachinesIdleRes_Handler,
		},
		{
			MethodName: "AddMachinesIdleRes",
			Handler:    _Manage_AddMachinesIdleRes_Handler,
		},
		{
			MethodName: "DelMachinesIdleRes",
			Handler:    _Manage_DelMachinesIdleRes_Handler,
		},
		{
			MethodName: "ModMachinesIdleRes",
			Handler:    _Manage_ModMachinesIdleRes_Handler,
		},
		{
			MethodName: "ListSkinCareProduct",
			Handler:    _Manage_ListSkinCareProduct_Handler,
		},
		{
			MethodName: "AddSkinCareProduct",
			Handler:    _Manage_AddSkinCareProduct_Handler,
		},
		{
			MethodName: "DelSkinCareProduct",
			Handler:    _Manage_DelSkinCareProduct_Handler,
		},
		{
			MethodName: "ModSkinCareProduct",
			Handler:    _Manage_ModSkinCareProduct_Handler,
		},
		{
			MethodName: "UpSkinCareProduct",
			Handler:    _Manage_UpSkinCareProduct_Handler,
		},
		{
			MethodName: "DownSkinCareProduct",
			Handler:    _Manage_DownSkinCareProduct_Handler,
		},
		{
			MethodName: "BatchSyncRecommendProduct",
			Handler:    _Manage_BatchSyncRecommendProduct_Handler,
		},
		{
			MethodName: "BatchSyncRecommendProject",
			Handler:    _Manage_BatchSyncRecommendProject_Handler,
		},
		{
			MethodName: "AddSkinCareProject",
			Handler:    _Manage_AddSkinCareProject_Handler,
		},
		{
			MethodName: "DelSkinCareProject",
			Handler:    _Manage_DelSkinCareProject_Handler,
		},
		{
			MethodName: "ModSkinCareProject",
			Handler:    _Manage_ModSkinCareProject_Handler,
		},
		{
			MethodName: "ListSkinCareProject",
			Handler:    _Manage_ListSkinCareProject_Handler,
		},
		{
			MethodName: "OnOffSkinCareProject",
			Handler:    _Manage_OnOffSkinCareProject_Handler,
		},
		{
			MethodName: "ListCosmeticsProduct",
			Handler:    _Manage_ListCosmeticsProduct_Handler,
		},
		{
			MethodName: "AddCosmeticsProduct",
			Handler:    _Manage_AddCosmeticsProduct_Handler,
		},
		{
			MethodName: "DelCosmeticsProduct",
			Handler:    _Manage_DelCosmeticsProduct_Handler,
		},
		{
			MethodName: "ModCosmeticsProduct",
			Handler:    _Manage_ModCosmeticsProduct_Handler,
		},
		{
			MethodName: "UpCosmeticsProduct",
			Handler:    _Manage_UpCosmeticsProduct_Handler,
		},
		{
			MethodName: "DownCosmeticsProduct",
			Handler:    _Manage_DownCosmeticsProduct_Handler,
		},
		{
			MethodName: "ListMichellPhan",
			Handler:    _Manage_ListMichellPhan_Handler,
		},
		{
			MethodName: "AddMichellPhan",
			Handler:    _Manage_AddMichellPhan_Handler,
		},
		{
			MethodName: "DelMichellPhan",
			Handler:    _Manage_DelMichellPhan_Handler,
		},
		{
			MethodName: "ModMichellPhan",
			Handler:    _Manage_ModMichellPhan_Handler,
		},
		{
			MethodName: "ListSkinCareAdvice",
			Handler:    _Manage_ListSkinCareAdvice_Handler,
		},
		{
			MethodName: "AddSkinCareAdvice",
			Handler:    _Manage_AddSkinCareAdvice_Handler,
		},
		{
			MethodName: "DelSkinCareAdvice",
			Handler:    _Manage_DelSkinCareAdvice_Handler,
		},
		{
			MethodName: "ModSkinCareAdvice",
			Handler:    _Manage_ModSkinCareAdvice_Handler,
		},
		{
			MethodName: "UpSkinCareAdvice",
			Handler:    _Manage_UpSkinCareAdvice_Handler,
		},
		{
			MethodName: "DownSkinCareAdvice",
			Handler:    _Manage_DownSkinCareAdvice_Handler,
		},
		{
			MethodName: "ListMeasureSkinRecord",
			Handler:    _Manage_ListMeasureSkinRecord_Handler,
		},
		{
			MethodName: "GetMeasureSkinDetail",
			Handler:    _Manage_GetMeasureSkinDetail_Handler,
		},
		{
			MethodName: "DelMeasureSkinRecord",
			Handler:    _Manage_DelMeasureSkinRecord_Handler,
		},
		{
			MethodName: "ListProductRecommendationWeightSetting",
			Handler:    _Manage_ListProductRecommendationWeightSetting_Handler,
		},
		{
			MethodName: "AddProductRecommendationWeightSetting",
			Handler:    _Manage_AddProductRecommendationWeightSetting_Handler,
		},
		{
			MethodName: "DelProductRecommendationWeightSetting",
			Handler:    _Manage_DelProductRecommendationWeightSetting_Handler,
		},
		{
			MethodName: "ModProductRecommendationWeightSetting",
			Handler:    _Manage_ModProductRecommendationWeightSetting_Handler,
		},
		{
			MethodName: "ListDeviceUser",
			Handler:    _Manage_ListDeviceUser_Handler,
		},
		{
			MethodName: "FrozenDeviceUser",
			Handler:    _Manage_FrozenDeviceUser_Handler,
		},
		{
			MethodName: "RecoverDeviceUser",
			Handler:    _Manage_RecoverDeviceUser_Handler,
		},
		{
			MethodName: "AddCourseClassInfo",
			Handler:    _Manage_AddCourseClassInfo_Handler,
		},
		{
			MethodName: "ModCourseClassInfo",
			Handler:    _Manage_ModCourseClassInfo_Handler,
		},
		{
			MethodName: "DelCourseClassInfo",
			Handler:    _Manage_DelCourseClassInfo_Handler,
		},
		{
			MethodName: "ListCourseClass",
			Handler:    _Manage_ListCourseClass_Handler,
		},
		{
			MethodName: "GetCourseClassNameList",
			Handler:    _Manage_GetCourseClassNameList_Handler,
		},
		{
			MethodName: "UpCourseClass",
			Handler:    _Manage_UpCourseClass_Handler,
		},
		{
			MethodName: "DownCourseClass",
			Handler:    _Manage_DownCourseClass_Handler,
		},
		{
			MethodName: "GetYouZanOnSaleList",
			Handler:    _Manage_GetYouZanOnSaleList_Handler,
		},
		{
			MethodName: "GetYouZanItemDetail",
			Handler:    _Manage_GetYouZanItemDetail_Handler,
		},
		{
			MethodName: "AddWiseManInfo",
			Handler:    _Manage_AddWiseManInfo_Handler,
		},
		{
			MethodName: "ModWiseManInfo",
			Handler:    _Manage_ModWiseManInfo_Handler,
		},
		{
			MethodName: "DelWiseManInfo",
			Handler:    _Manage_DelWiseManInfo_Handler,
		},
		{
			MethodName: "ListWiseMan",
			Handler:    _Manage_ListWiseMan_Handler,
		},
		{
			MethodName: "GetWiseManNameList",
			Handler:    _Manage_GetWiseManNameList_Handler,
		},
		{
			MethodName: "UpWiseMan",
			Handler:    _Manage_UpWiseMan_Handler,
		},
		{
			MethodName: "DownWiseMan",
			Handler:    _Manage_DownWiseMan_Handler,
		},
		{
			MethodName: "AddCourseInfo",
			Handler:    _Manage_AddCourseInfo_Handler,
		},
		{
			MethodName: "ModCourseInfo",
			Handler:    _Manage_ModCourseInfo_Handler,
		},
		{
			MethodName: "DelCourseInfo",
			Handler:    _Manage_DelCourseInfo_Handler,
		},
		{
			MethodName: "ListCourse",
			Handler:    _Manage_ListCourse_Handler,
		},
		{
			MethodName: "ListCanRecommendCourseName",
			Handler:    _Manage_ListCanRecommendCourseName_Handler,
		},
		{
			MethodName: "ListCourseStepAndProduct",
			Handler:    _Manage_ListCourseStepAndProduct_Handler,
		},
		{
			MethodName: "UpCourse",
			Handler:    _Manage_UpCourse_Handler,
		},
		{
			MethodName: "DownCourse",
			Handler:    _Manage_DownCourse_Handler,
		},
		{
			MethodName: "AddCourseRecommendInfo",
			Handler:    _Manage_AddCourseRecommendInfo_Handler,
		},
		{
			MethodName: "ModCourseRecommendInfo",
			Handler:    _Manage_ModCourseRecommendInfo_Handler,
		},
		{
			MethodName: "DelCourseRecommendInfo",
			Handler:    _Manage_DelCourseRecommendInfo_Handler,
		},
		{
			MethodName: "ListCourseRecommend",
			Handler:    _Manage_ListCourseRecommend_Handler,
		},
		{
			MethodName: "UpCourseRecommend",
			Handler:    _Manage_UpCourseRecommend_Handler,
		},
		{
			MethodName: "DownCourseRecommend",
			Handler:    _Manage_DownCourseRecommend_Handler,
		},
		{
			MethodName: "AddDoctorInfo",
			Handler:    _Manage_AddDoctorInfo_Handler,
		},
		{
			MethodName: "ModDoctorInfo",
			Handler:    _Manage_ModDoctorInfo_Handler,
		},
		{
			MethodName: "DelDoctorInfo",
			Handler:    _Manage_DelDoctorInfo_Handler,
		},
		{
			MethodName: "ListDoctor",
			Handler:    _Manage_ListDoctor_Handler,
		},
		{
			MethodName: "UpDoctor",
			Handler:    _Manage_UpDoctor_Handler,
		},
		{
			MethodName: "DownDoctor",
			Handler:    _Manage_DownDoctor_Handler,
		},
		{
			MethodName: "AddOperationLog",
			Handler:    _Manage_AddOperationLog_Handler,
		},
		{
			MethodName: "ListOperationLog",
			Handler:    _Manage_ListOperationLog_Handler,
		},
		{
			MethodName: "ListImportTask",
			Handler:    _Manage_ListImportTask_Handler,
		},
		{
			MethodName: "AddImportTask",
			Handler:    _Manage_AddImportTask_Handler,
		},
		{
			MethodName: "ListDataPoint",
			Handler:    _Manage_ListDataPoint_Handler,
		},
		{
			MethodName: "AddDeviceVersionInfo",
			Handler:    _Manage_AddDeviceVersionInfo_Handler,
		},
		{
			MethodName: "ModDeviceVersionInfo",
			Handler:    _Manage_ModDeviceVersionInfo_Handler,
		},
		{
			MethodName: "DelDeviceVersionInfo",
			Handler:    _Manage_DelDeviceVersionInfo_Handler,
		},
		{
			MethodName: "ListDeviceVersion",
			Handler:    _Manage_ListDeviceVersion_Handler,
		},
		{
			MethodName: "ListCheckPasswordList",
			Handler:    _Manage_ListCheckPasswordList_Handler,
		},
		{
			MethodName: "SetCheckPasswordTimer",
			Handler:    _Manage_SetCheckPasswordTimer_Handler,
		},
		{
			MethodName: "ListWhiteList",
			Handler:    _Manage_ListWhiteList_Handler,
		},
		{
			MethodName: "AddWhiteList",
			Handler:    _Manage_AddWhiteList_Handler,
		},
		{
			MethodName: "DelWhiteList",
			Handler:    _Manage_DelWhiteList_Handler,
		},
		{
			MethodName: "SyncWhiteList",
			Handler:    _Manage_SyncWhiteList_Handler,
		},
		{
			MethodName: "ListAppConfig",
			Handler:    _Manage_ListAppConfig_Handler,
		},
		{
			MethodName: "AddAppConfig",
			Handler:    _Manage_AddAppConfig_Handler,
		},
		{
			MethodName: "DelAppConfig",
			Handler:    _Manage_DelAppConfig_Handler,
		},
		{
			MethodName: "ModAppConfig",
			Handler:    _Manage_ModAppConfig_Handler,
		},
		{
			MethodName: "SyncAppConfig",
			Handler:    _Manage_SyncAppConfig_Handler,
		},
		{
			MethodName: "ListBusiness",
			Handler:    _Manage_ListBusiness_Handler,
		},
		{
			MethodName: "CreateBusiness",
			Handler:    _Manage_CreateBusiness_Handler,
		},
		{
			MethodName: "AddBusiness",
			Handler:    _Manage_AddBusiness_Handler,
		},
		{
			MethodName: "ModBusiness",
			Handler:    _Manage_ModBusiness_Handler,
		},
		{
			MethodName: "DelBusiness",
			Handler:    _Manage_DelBusiness_Handler,
		},
		{
			MethodName: "ListShopInfo",
			Handler:    _Manage_ListShopInfo_Handler,
		},
		{
			MethodName: "AddShopInfo",
			Handler:    _Manage_AddShopInfo_Handler,
		},
		{
			MethodName: "ModShopInfo",
			Handler:    _Manage_ModShopInfo_Handler,
		},
		{
			MethodName: "DelShopInfo",
			Handler:    _Manage_DelShopInfo_Handler,
		},
		{
			MethodName: "ListPermission",
			Handler:    _Manage_ListPermission_Handler,
		},
		{
			MethodName: "AddPermission",
			Handler:    _Manage_AddPermission_Handler,
		},
		{
			MethodName: "ModPermission",
			Handler:    _Manage_ModPermission_Handler,
		},
		{
			MethodName: "DelPermission",
			Handler:    _Manage_DelPermission_Handler,
		},
		{
			MethodName: "GetListPermissionByRoleId",
			Handler:    _Manage_GetListPermissionByRoleId_Handler,
		},
		{
			MethodName: "GetListPermissionByManageId",
			Handler:    _Manage_GetListPermissionByManageId_Handler,
		},
		{
			MethodName: "ListManagerRoleRelation",
			Handler:    _Manage_ListManagerRoleRelation_Handler,
		},
		{
			MethodName: "AddManagerRoleRelation",
			Handler:    _Manage_AddManagerRoleRelation_Handler,
		},
		{
			MethodName: "ModManagerRoleRelation",
			Handler:    _Manage_ModManagerRoleRelation_Handler,
		},
		{
			MethodName: "DelManagerRoleRelation",
			Handler:    _Manage_DelManagerRoleRelation_Handler,
		},
		{
			MethodName: "ListManagerRoleRelationByManageId",
			Handler:    _Manage_ListManagerRoleRelationByManageId_Handler,
		},
		{
			MethodName: "DelManagerRoleRelationByManageId",
			Handler:    _Manage_DelManagerRoleRelationByManageId_Handler,
		},
		{
			MethodName: "AddManagerRoleRelationByManageId",
			Handler:    _Manage_AddManagerRoleRelationByManageId_Handler,
		},
		{
			MethodName: "ListRolePermissionRelation",
			Handler:    _Manage_ListRolePermissionRelation_Handler,
		},
		{
			MethodName: "AddRolePermissionRelation",
			Handler:    _Manage_AddRolePermissionRelation_Handler,
		},
		{
			MethodName: "ModRolePermissionRelation",
			Handler:    _Manage_ModRolePermissionRelation_Handler,
		},
		{
			MethodName: "DelRolePermissionRelation",
			Handler:    _Manage_DelRolePermissionRelation_Handler,
		},
		{
			MethodName: "GetSmsCode",
			Handler:    _Manage_GetSmsCode_Handler,
		},
		{
			MethodName: "LoginWithSmsCode",
			Handler:    _Manage_LoginWithSmsCode_Handler,
		},
		{
			MethodName: "GetSmsCodeByCreateBusiness",
			Handler:    _Manage_GetSmsCodeByCreateBusiness_Handler,
		},
		{
			MethodName: "GetBusinessById",
			Handler:    _Manage_GetBusinessById_Handler,
		},
		{
			MethodName: "GetPreAuthCode",
			Handler:    _Manage_GetPreAuthCode_Handler,
		},
		{
			MethodName: "AuthorizationEventReceptionConfig",
			Handler:    _Manage_AuthorizationEventReceptionConfig_Handler,
		},
		{
			MethodName: "GetAuthorizerAccessToken",
			Handler:    _Manage_GetAuthorizerAccessToken_Handler,
		},
		{
			MethodName: "GetAuthorizerInfo",
			Handler:    _Manage_GetAuthorizerInfo_Handler,
		},
		{
			MethodName: "ApiQueryAuth",
			Handler:    _Manage_ApiQueryAuth_Handler,
		},
		{
			MethodName: "GetWechatOfficialAccountPlatform",
			Handler:    _Manage_GetWechatOfficialAccountPlatform_Handler,
		},
		{
			MethodName: "AddWechatOfficialAccountPlatform",
			Handler:    _Manage_AddWechatOfficialAccountPlatform_Handler,
		},
		{
			MethodName: "ModWechatOfficialAccountPlatform",
			Handler:    _Manage_ModWechatOfficialAccountPlatform_Handler,
		},
		{
			MethodName: "SimpleModUserInfo",
			Handler:    _Manage_SimpleModUserInfo_Handler,
		},
		{
			MethodName: "GetRoleInfoByShopId",
			Handler:    _Manage_GetRoleInfoByShopId_Handler,
		},
		{
			MethodName: "ListSystemEnum",
			Handler:    _Manage_ListSystemEnum_Handler,
		},
		{
			MethodName: "ListScoreSetting",
			Handler:    _Manage_ListScoreSetting_Handler,
		},
		{
			MethodName: "AddScoreSetting",
			Handler:    _Manage_AddScoreSetting_Handler,
		},
		{
			MethodName: "ModScoreSetting",
			Handler:    _Manage_ModScoreSetting_Handler,
		},
		{
			MethodName: "DelScoreSetting",
			Handler:    _Manage_DelScoreSetting_Handler,
		},
		{
			MethodName: "AddWeiXinFans",
			Handler:    _Manage_AddWeiXinFans_Handler,
		},
		{
			MethodName: "DelWeiXinFans",
			Handler:    _Manage_DelWeiXinFans_Handler,
		},
		{
			MethodName: "GetAuthorizerAccessTokenByAppId",
			Handler:    _Manage_GetAuthorizerAccessTokenByAppId_Handler,
		},
		{
			MethodName: "SCAN",
			Handler:    _Manage_SCAN_Handler,
		},
		{
			MethodName: "AddPackages",
			Handler:    _Manage_AddPackages_Handler,
		},
		{
			MethodName: "ListPackages",
			Handler:    _Manage_ListPackages_Handler,
		},
		{
			MethodName: "ModPackages",
			Handler:    _Manage_ModPackages_Handler,
		},
		{
			MethodName: "DelPackages",
			Handler:    _Manage_DelPackages_Handler,
		},
		{
			MethodName: "ListOrder",
			Handler:    _Manage_ListOrder_Handler,
		},
		{
			MethodName: "SCANByRecordId",
			Handler:    _Manage_SCANByRecordId_Handler,
		},
		{
			MethodName: "GetOSSInfo",
			Handler:    _Manage_GetOSSInfo_Handler,
		},
		{
			MethodName: "ExportDeviceUser",
			Handler:    _Manage_ExportDeviceUser_Handler,
		},
		{
			MethodName: "ExportMeasureSkinRecord",
			Handler:    _Manage_ExportMeasureSkinRecord_Handler,
		},
		{
			MethodName: "AddSystemSaying",
			Handler:    _Manage_AddSystemSaying_Handler,
		},
		{
			MethodName: "ListSystemSaying",
			Handler:    _Manage_ListSystemSaying_Handler,
		},
		{
			MethodName: "ModSystemSaying",
			Handler:    _Manage_ModSystemSaying_Handler,
		},
		{
			MethodName: "DelSystemSaying",
			Handler:    _Manage_DelSystemSaying_Handler,
		},
		{
			MethodName: "OnOffSystemSaying",
			Handler:    _Manage_OnOffSystemSaying_Handler,
		},
		{
			MethodName: "AddSkinType",
			Handler:    _Manage_AddSkinType_Handler,
		},
		{
			MethodName: "ListSkinType",
			Handler:    _Manage_ListSkinType_Handler,
		},
		{
			MethodName: "ModSkinType",
			Handler:    _Manage_ModSkinType_Handler,
		},
		{
			MethodName: "DelSkinType",
			Handler:    _Manage_DelSkinType_Handler,
		},
		{
			MethodName: "OnOffSkinType",
			Handler:    _Manage_OnOffSkinType_Handler,
		},
		{
			MethodName: "SetLoginTokenCache",
			Handler:    _Manage_SetLoginTokenCache_Handler,
		},
		{
			MethodName: "GetLoginTokenCache",
			Handler:    _Manage_GetLoginTokenCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manage.proto",
}
